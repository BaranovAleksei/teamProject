{"version":3,"sources":["redux/loginReducer.ts","Component/Pages/Error404/Error404.tsx","api/api.ts","redux/forgotReducer.ts","Component/Pages/Login/Login.tsx","Component/Pages/NewPassword/NewPassword.tsx","redux/authReducer.ts","Component/Pages/PasswordRecovery/PasswordRecovery.tsx","Component/Pages/Registration/Registration.tsx","Component/Pages/Profile/Profile.tsx","Component/Routes/Routes.tsx","Component/Header/Header.tsx","App.tsx","redux/appReducer.ts","redux/store.ts","index.tsx","Component/Header/Header.module.css","Component/Pages/Error404/Error404.module.css","Component/Pages/NewPassword/NewPassword.module.css","Component/Pages/Registration/Registration.module.css","Component/Pages/Profile/Profile.module.css"],"names":["ACTIONS_TYPE","Error404","className","s","errorOverlay","instance","axios","create","baseURL","withCredentials","headers","API","registration","email","password","post","then","response","data","authMe","login","rememberMe","logOut","delete","passRec","from","message","ACTION_TYPE","initialState","isLoggedIn","error","loginTC","dispatch","res","value","type","SET_IS_ERROR","SET_IS_LOGIN","Login","useDispatch","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","useSelector","state","Grid","container","justify","item","xs","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","NewPassword","newPassOverlay","answer","html","info","success","passRecTC","SET_OK","PasswordRecovery","alignItems","height","isLogin","isRegistered","setRegistration","SET_ERROR","SET_IS_REGISTERED","Registration","auth","password1","password2","console","log","registrationOverlay","name","onChange","handleChange","Profile","profileOverlay","PATH","Routes","path","exact","render","to","Header","nav","menuHover","items","activeClassName","activeLink","App","rootReducer","combineReducers","action","app","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.13906e05.chunk.js","sourcesContent":["import API, {AuthLoginType} from \"../api/api\"\nimport {Dispatch} from 'redux'\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'loginReducer/SET-IS-LOGGED-IN',\n    SET_IS_ERROR = 'loginReducer/SET-IS-ERROR',\n}\n\nconst initialState = {\n    isLoggedIn: false,\n    error: ''\n}\ntype InitialStateType = typeof initialState\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLoggedIn: action.value}\n        case ACTIONS_TYPE.SET_IS_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsErrorAC = (error: string) => ({type: ACTIONS_TYPE.SET_IS_ERROR, error} as const)\n\n//thunks\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch<ActionsType>) => {\n    API.login(data.email, data.password, data.rememberMe).then(res => {\n        if (!res.error) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n            dispatch(setIsErrorAC(res.error))\n        }\n    })\n}\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setIsErrorAC>\n\n","import React from 'react'\nimport s from './Error404.module.css'\n\nexport const Error404 = () => {\n\treturn (\n\t\t<div className={s.errorOverlay}>\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\n\t\t</div>\n\t)\n}","import axios from 'axios';\nimport {resolveAny} from \"dns\";\n\n\nconst instance = axios.create({\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/', //heroku\n    baseURL: 'http://localhost:7542/2.0/',  //local\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'bb865843-5d18-4250-b5ca-e680c11343f1', //Margo\n        //НАПИШИТЕ ЗДЕСЬ СВОЙ и пользуйтесь именно своим ключиком! =)\n        // 'API-KEY':     //Alex\n        // 'API-KEY2':     'bb865843-5d18-4250-b5ca-e680c11343f1'\n    }\n})\n\nexport const API = {\n    registration: (email: string, password: string) => {\n        return instance.post<RegistrationPostResponseType>('/auth/register',{email, password}).then(response => {\n            return response.data\n        })\n    },\n    authMe: () => {\n\n    },\n    login: ( email: string, password: string, rememberMe: boolean = true) => {\n        return instance.post<LoginResponseType>('auth/login' , {email, password,rememberMe}).then(response => {\n            return response.data\n        })\n    },\n    logOut: () => {\n        return instance.delete<LogOutResponseType>(`auth/login`);\n    },\n    //for passRecovery\n    passRec: (email: string, from: string, message: string ) => {\n        return instance.post<PassRecResponseType>('auth/forgot',{ email, from, message }).then(response => {\n            debugger\n            return response.data\n        })\n    }\n\n};\n\nexport default API;\n\n\n//types\nexport type LogOutResponseType = {\n    info: string\n    error: string\n}\n\nexport type LoginResponseType  = {\n    _id: string\n    email: string\n    name: string\n    avatar?: string\n    publicCardPacksCount: number;\n    created: Date\n    updated: Date\n    isAdmin: boolean\n    verified: boolean\n    rememberMe: boolean\n    error?: string\n}\n\nexport type AuthLoginType = {\n    email: string\n    password: string\n    rememberMe: true\n}\n\nexport type RegistrationPostDataType = { email: string, password: string }\nexport type RegistrationPostResponseType = {addedUser: any, error?: string}\n\n//for PasswordRec\nexport type PassRecType = {\n    email: string\n    from: string\n    message: string\n}\nexport type PassRecResponseType = {\n    answer: boolean\n    html: boolean\n    info: string\n    success: boolean\n}","import API, {PassRecType} from '../api/api'\nimport {Dispatch} from 'redux'\n\nenum ACTION_TYPE {\n\tSET_OK = 'forgotReducer/SET_OK'\n}\n\nconst initialState = {\n\tanswer: false,\n\thtml: false,\n\tinfo: '',\n\tsuccess: true\n}\n\ntype InitialStateType = typeof initialState\n\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n\tswitch (action.type) {\n\t\tcase ACTION_TYPE.SET_OK:\n\t\t\treturn {...state, info: action.info, answer: true, html: true}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const setOkPassRecAC = (info: string) => ({type: ACTION_TYPE.SET_OK, info} as const)\n\nexport const passRecTC = (data: PassRecType) => (dispatch: Dispatch<ActionType>) => {\n\tAPI.passRec(data.email, data.from, data.message).then(res => {\n\t\tdispatch(setOkPassRecAC(res.info))\n\t})\n}\n\ntype ActionType = ReturnType<typeof setOkPassRecAC>","import React from 'react'\nimport s from './Login.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button, Grid} from '@material-ui/core'\nimport {loginTC} from \"../../../redux/loginReducer\";\nimport {AppRootStateType} from \"../../../redux/store\";\nimport { Redirect } from 'react-router-dom';\n\n\nexport type AuthLoginType = {\n\temail: string\n\tpassword: string\n\trememberMe: true\n}\n\nexport const Login = () => {\n\n\ttype FormikErrorType = {\n\t\temail?: string\n\t\tpassword?: string\n\t\trememberMe?: boolean\n\t}\n\n\tconst dispatch = useDispatch();\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: 'margokomilfo@mail.ru',\n\t\t\tpassword: '12345678',\n\t\t\trememberMe: true\n\t\t},\n\t\tvalidate: (values: AuthLoginType) => {\n\t\t\tconst errors: FormikErrorType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Поле email обязательно';\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = 'Невалидный email';\n\t\t\t} if (!values.password) {\n\t\t\t\terrors.password = 'Поле обязательно';\n\t\t\t} else if(values.password.length < 3) {\n\t\t\t\terrors.password = 'Длина пароля должна быть больше 3 символов';\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(loginTC({email:values.email, password:values.password, rememberMe: values.rememberMe}))\n\t\t\tformik.resetForm();\n\t\t},\n\t})\n\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n\t// if(isLoggedIn) {\n\t// \treturn <Redirect to={'/'}/>\n\t// }\n\n\treturn <Grid container justify=\"center\">\n\t\t<Grid item xs={4}>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<FormControl>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={'Remember me'}\n\t\t\t\t\t\t\tcontrol={<Checkbox\n\t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.rememberMe && formik.errors.rememberMe ? <div style={{color: \"red\"}}>{formik.errors.rememberMe}</div> : null}\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</FormControl>\n\t\t\t</form>\n\n\t\t</Grid>\n\t</Grid>\n}\n","import React from 'react'\nimport s from './NewPassword.module.css'\n\nexport const NewPassword = () => {\n\treturn (\n\t\t<div className={s.newPassOverlay}>\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t\tNewPassword\n\t\t</div>\n\t)\n}","import API, { RegistrationPostDataType } from \"../api/api\"\nimport {Dispatch} from 'redux'\n\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'authReducer/SET_IS_LOGIN',\n    SET_IS_REGISTERED = 'authReducer/SET_IS_REGISTERED',\n    SET_ERROR = 'authReducer/SET_ERROR',\n}\n\nconst initialState = {\n    isLogin: false,\n    isRegistered: false,\n    error: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLogin: action.value}\n        case ACTIONS_TYPE.SET_IS_REGISTERED:\n            return {...state, isRegistered: action.value}\n        case ACTIONS_TYPE.SET_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setIsLogin = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsRegistered = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_REGISTERED, value} as const)\nexport const setError = (error: string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)\n\n// thunks\nexport const setRegistration = (data: RegistrationPostDataType) => (dispatch: Dispatch) => {\n    API.registration(data.email, data.password).then(res => {\n        if (!res.error) {\n            dispatch(setIsRegistered(true));\n        } else {\n            dispatch(setError(res.error))\n        }\n    })\n}\n\n// types\ntype ActionsType =\n    | ReturnType<typeof setIsLogin>\n    | ReturnType<typeof setIsRegistered>\n    | ReturnType<typeof setError>\n","import React from 'react'\nimport {useFormik} from 'formik'\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\nimport {passRecTC} from \"../../../redux/forgotReducer\";\nimport {useDispatch} from \"react-redux\";\n\ntype PassRecType = {\n\temail: string\n\tfrom: string\n\tmessage: string\n}\n\nexport const PasswordRecovery = () => {\n\n\ttype FormikErrosType = {\n\t\temail?: string\n\t}\n\tconst dispatch = useDispatch()\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: '',\n\t\t\tfrom: 'test-front-admin <baranov.sys@gmail.com>',\n\t\t\tmessage: `<div style=\"background-color: lime;padding: 15px> password recovery link: \n<a href='http://localhost:3000/teamProject#/new-pass/$token$'>link </a> </div>`\n\t\t},\n\t\tvalidate: (values: PassRecType) => {\n\t\t\tconst errors: FormikErrosType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Обезательно для ввода';\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = 'Не корректный email';\n\t\t\t}\n\t\t\treturn errors\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(passRecTC ({email: values.email, from: values.from, message: values.message} ))\n\t\t\tformik.resetForm()\n\t\t}\n\t})\n\n\treturn (\n\t\t<Grid container justify=\"center\" alignItems=\"stretch\" style={{height: '100vh'}}>\n\t\t\t<Grid container justify=\"center\" alignItems=\"center\" >\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t\t<FormControl>\n\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tlabel='Email'\n\t\t\t\t\t\t\t\tmargin = 'normal'\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{ formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n\t\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Send email</Button>\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</form>\n\t\t\t</Grid>\n\t\t</Grid>\n\t)\n}","import { useFormik } from 'formik';\nimport React from 'react'\nimport s from './Registration.module.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport { AppRootStateType } from '../../../redux/store';\nimport {setRegistration} from '../../../redux/authReducer'\n\ntype FormikDataType = {\n\temail: string\n\tpassword1: string\n\tpassword2: string\n}\nexport const Registration = () => {\n\tconst dispatch = useDispatch()\n\tconst isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered )\n\n\tconst validate = (values: FormikDataType) => {\n\t\tconst errors: any = {}\n\t\tif (!values.email) {\n\t\t\terrors.email = 'Required';\n\t\t} else if (\n\t\t\t!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n\t\t) {\n\t\t\terrors.email = 'Invalid email address';\n\t\t}\n\t\treturn errors\n\t}\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: 'margokomilfo@mail.ru',\n\t\t\tpassword1: '12345678',\n\t\t\tpassword2: '12345678',\n\t\t}as FormikDataType,\n\t\tvalidate,\n\t\tonSubmit: values => {\n\t\t\tconsole.log(values);\n\t\t\tdispatch(setRegistration({email:values.email, password:values.password1}))\n\t\t},\n\t})\n\treturn (\n\t\t<div className={s.registrationOverlay}>\n\t\t\t<h1>Registration form</h1>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\n\t\t\t\t<input name=\"email\" value={formik.values.email}  onChange={formik.handleChange}/>\n\t\t\t\t{formik.touched.email && formik.errors.email && <div>{formik.errors.email}</div>}\n\n\t\t\t\t<input name=\"password1\" type='password' value={formik.values.password1} onChange={formik.handleChange}/>\n\t\t\t\t{formik.touched.email && formik.errors.password1 && <div>{formik.errors.password1}</div>}\n\n\t\t\t\t<input name=\"password2\" type='password' value={formik.values.password2} onChange={formik.handleChange}/>\n\t\t\t\t{formik.touched.email && formik.errors.password2 && <div>{formik.errors.password2}</div>}\n\n\t\t\t\t<button type=\"submit\">Submit</button>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport s from './Profile.module.css'\n\nexport const Profile = () => {\n\treturn (\n\t\t<div className={s.profileOverlay}>\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t\tPROFILE\n\t\t</div>\n\t)\n}","import React from 'react'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport {Error404} from \"../Pages/Error404/Error404\";\nimport {Login} from \"../Pages/Login/Login\";\nimport {NewPassword} from \"../Pages/NewPassword/NewPassword\";\nimport {PasswordRecovery} from \"../Pages/PasswordRecovery/PasswordRecovery\";\nimport {Registration} from \"../Pages/Registration/Registration\";\nimport {Profile} from \"../Pages/Profile/Profile\";\n\nexport const PATH = {\n\tLOGIN: '/login',\n\tREGISTRATION: '/registration',\n\tPASSWORD_RECOVERY: '/pass-recovery',\n\tNEW_PASSWORD: '/new-pass',\n\tPROFILE: '/profile'\n}\n\nfunction Routes() {\n\treturn (\n\t\t<div>\n\t\t\t<Switch>\n\t\t\t\t{/*в начале мы попадаем на страницу \"/\" и переходим сразу на страницу Login*/}\n\t\t\t\t{/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\n\t\t\t\t<Route path={\"/\"} exact render={ () => <Redirect to={ PATH.LOGIN }/> }/>\n\n\t\t\t\t<Route path={ PATH.LOGIN } render={ () => <Login/> } />\n\t\t\t\t<Route path={ PATH.REGISTRATION } render={ () => <Registration /> } />\n\t\t\t\t<Route path={ PATH.PASSWORD_RECOVERY } render={ ()=> <PasswordRecovery/> } />\n\t\t\t\t<Route path={ PATH.NEW_PASSWORD } render={ ()=> <NewPassword/> } />\n\t\t\t\t<Route path={ PATH.PROFILE } render={ ()=> <Profile/> } />\n\n\t\t\t\t{/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\n\t\t\t\t<Route render={ () => <Error404/>}/>\n\n\t\t\t</Switch>\n\t\t</div>\n\t)\n}\n\nexport default Routes","import React from 'react'\nimport s from './Header.module.css'\nimport {PATH} from \"../Routes/Routes\"\nimport {NavLink} from \"react-router-dom\"\n\nfunction Header() {\n\treturn (\n\t\t<div className={s.nav}>\n\t\t\t<button className={ s.menuHover }> Меню </button>\n\t\t\t<div className={s.items}>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to= { PATH.PROFILE } activeClassName = { s.activeLink }>Profile</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.LOGIN } activeClassName = { s.activeLink }>Login</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.REGISTRATION } activeClassName = { s.activeLink }>Registration</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.NEW_PASSWORD } activeClassName = { s.activeLink }>New password</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.PASSWORD_RECOVERY } activeClassName = { s.activeLink }>Password recovery</NavLink>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Header","import React from 'react';\nimport './App.css';\nimport {HashRouter} from \"react-router-dom\";\nimport Routes from \"./Component/Routes/Routes\";\nimport Header from \"./Component/Header/Header\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Header/>\n      <Routes/>\n    </HashRouter>\n  )\n}\n\nexport default App;\n","\nexport enum ACTIONS_TYPE {\n}\n\nconst initialState = {\n\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        default:\n            return state\n    }\n}\n\n\n// thunks\n\n\n// types\ntype ActionsType = any","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './appReducer'\nimport { authReducer } from './authReducer'\nimport {loginReducer} from \"./loginReducer\";\nimport {forgotReducer} from \"./forgotReducer\";\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    app: appReducer,\n    login: loginReducer,\n    passRec: forgotReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { store } from './redux/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3rYIR\",\"menuHover\":\"Header_menuHover__2eDeL\",\"items\":\"Header_items__3t3lP\",\"item\":\"Header_item__11opL\",\"activeLink\":\"Header_activeLink__3WAn0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorOverlay\":\"Error404_errorOverlay__2XWN1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassOverlay\":\"NewPassword_newPassOverlay__1SDdp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationOverlay\":\"Registration_registrationOverlay__3EAxe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileOverlay\":\"Profile_profileOverlay__2Mdwa\"};"],"sourceRoot":""}