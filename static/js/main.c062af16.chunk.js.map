{"version":3,"sources":["Component/Pages/NewPassword/NewPassword.module.css","Component/Pages/Registration/Registration.module.css","Component/Pages/Profile/Profile.module.css","Component/Pages/Error404/Error404.module.css","redux/profileReducer.ts","Component/Pages/Error404/Error404.tsx","api/api.ts","redux/loginReducer.ts","redux/appReducer.ts","redux/forgotReducer.ts","Component/Pages/Login/Login.tsx","redux/authReducer.ts","Component/Pages/NewPassword/NewPassword.tsx","Component/Pages/PasswordRecovery/PasswordRecovery.tsx","Component/Pages/Registration/Registration.tsx","Component/Pages/Profile/Profile.tsx","Component/Routes/Routes.tsx","Component/Header/Header.tsx","App.tsx","redux/store.ts","index.tsx","Component/Header/Header.module.css","Component/Pages/PasswordRecovery/PasswordRecovery.module.css"],"names":["module","exports","ACTIONS_TYPE","Error404","className","s","errorOverlay","instance","axios","create","baseURL","withCredentials","headers","API","registration","email","password","post","then","response","data","authMe","get","res","login","rememberMe","logOut","delete","passRec","from","message","newPass","myToken","initialState","profile","isLoggedIn","error","setIsLoggedInAC","value","type","SET_IS_LOGIN","setIsErrorAC","SET_IS_ERROR","loginTC","dispatch","SET_PROFILE","catch","err","ACTION_TYPE","isInitialized","status","initializeAppTC","SET_INITIALIZED_APP","Login","useDispatch","useSelector","state","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","info","infoNewPass","errorNewPass","setErrorPassRec","SET_ERROR","sendEmailPassRecTC","SET_OK","newPassTC","token","SET_OK_NEW_PASS","SET_ERROR_NEW_PASS","NewPassword","history","useHistory","location","pathname","slice","newPassOverlay","spanText","labelCol","span","wrapperCol","name","remember","onFinish","newPassword1","onFinishFailed","errorInfo","console","log","Item","hasFeedback","rules","required","getFieldValue","validator","_","Promise","reject","Error","resolve","Password","htmlType","PasswordRecovery","errorPassRec","infoPassRec","passRecOverlay","nameRecPass","formRecPass","emailRecPass","setTimeout","isLogin","isRegistered","setError","setRegistration","SET_IS_REGISTERED","Registration","auth","registrationOverlay","password1","width","serverError","Profile","profileOverlay","src","avatar","alt","_id","created","isAdmin","onClick","PATH","Routes","path","exact","render","Header","nav","menuHover","items","activeClassName","activeLink","App","rootReducer","combineReducers","action","app","CHANGE_STATUS","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c062af16.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassOverlay\":\"NewPassword_newPassOverlay__1SDdp\",\"spanText\":\"NewPassword_spanText__3l6cJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationOverlay\":\"Registration_registrationOverlay__3EAxe\",\"serverError\":\"Registration_serverError__1DKFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileOverlay\":\"Profile_profileOverlay__2Mdwa\",\"profile\":\"Profile_profile__3pHxS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorOverlay\":\"Error404_errorOverlay__2XWN1\"};","import API, {AuthLoginType} from '../api/api'\nimport {Dispatch} from 'redux'\nimport { ProfileType } from './loginReducer'\n\nexport enum ACTIONS_TYPE {\n    SET_PROFILE = 'loginReducer/SET_PROFILE',\n}\n\nconst initialState = {\n    profile: null as null | ProfileType\n}\ntype InitialStateType = typeof initialState\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_PROFILE:\n            return {...state, profile: action.profile}\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const setProfileAC = (profile: ProfileType) => ({type: ACTIONS_TYPE.SET_PROFILE, profile} as const)\n\n//thunks\n\n\n//types\ntype ActionsType = ReturnType<typeof setProfileAC>\n","import React from 'react'\nimport s from './Error404.module.css'\n\nexport const Error404 = () => {\n\treturn (\n\t\t<div className={s.errorOverlay}>\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\n\t\t</div>\n\t)\n}","import axios from 'axios'\n\nconst instance = axios.create({\n    // baseURL: 'https://neko-back.herokuapp.com/2.0/', //heroku\n    baseURL: 'http://localhost:7542/2.0/',  //local\n    withCredentials: true,\n    headers: {}\n})\n\nexport const API = {\n    registration: (email: string, password: string) => {\n        return instance.post<RegistrationPostResponseType>('/auth/register', {email, password}).then(response => {\n            return response.data\n        })\n    },\n    authMe: () => {\n        return instance.get('auth/me').then(res => {\n            return res.data\n        })\n    },\n    login: (email: string | null, password: string | null, rememberMe: boolean = true) => {\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe}).then(response => {\n            return response.data\n        })\n    },\n    logOut: () => {\n        return instance.delete<LogOutResponseType>(`auth/me`)\n    },\n    //for passRecovery\n    passRec: (email: string, from: string, message: string) => {\n        return instance.post<PassRecResponseType>('auth/forgot', {email, from, message})\n          .then(response => { return response.data })\n    },\n    newPass: (password: string, myToken: string) => {\n        return instance.post<NewPassResponseType> ('/auth/set-new-password', {password, myToken})\n          .then(response => { return response.data })\n    }\n\n}\n\nexport default API\n\n\n//types\nexport type LogOutResponseType = {\n    info: string\n    error: string\n}\n\nexport type LoginResponseType = {\n    avatar: string\n    created: string\n    email: string\n    isAdmin: boolean\n    name: string\n    publicCardPacksCount: number\n    rememberMe: boolean\n    token: string\n    tokenDeathTime: number\n    updated: string\n    verified: boolean\n    __v: number\n    _id: string\n}\n\nexport type AuthLoginType = {\n    email: string\n    password: string\n    rememberMe: true\n}\n\nexport type RegistrationPostDataType = { email: string, password: string }\nexport type RegistrationPostResponseType = { addedUser: any, error?: string }\n\n//for PasswordRec\nexport type PassRecType = {\n    email: string\n    from: string\n    message: string\n}\nexport type PassRecResponseType = {\n    answer: boolean\n    html: boolean\n    info: string\n    success: boolean\n}\nexport type NewPassResponseType = {\n    info: string\n    error: string\n}","import API, {AuthLoginType} from '../api/api'\nimport {Dispatch} from 'redux'\nimport {setProfileAC} from './profileReducer'\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'loginReducer/SET-IS-LOGGED-IN',\n    SET_IS_ERROR = 'loginReducer/SET-IS-ERROR',\n}\n\nconst initialState = {\n    isLoggedIn: false,\n    error: '',\n}\ntype InitialStateType = typeof initialState\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLoggedIn: action.value}\n        case ACTIONS_TYPE.SET_IS_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsErrorAC = (error: string) => ({type: ACTIONS_TYPE.SET_IS_ERROR, error} as const)\n\n//thunks\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch) => {\n    API.login(data.email, data.password, data.rememberMe)\n        .then(res => {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setProfileAC(res))\n        })\n        .catch(err => {\n            dispatch(setIsErrorAC(err.error))\n        })\n}\nexport const logOutTC = () => (dispatch: Dispatch) => {\n    API.logOut()\n        .then(res => {\n            dispatch(setIsLoggedInAC(false))\n        })\n        .catch(err => {\n            dispatch(setIsErrorAC(err.error))\n        })\n}\n\n//types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setIsErrorAC>\n\nexport type ProfileType = {\n    avatar: string\n    created: string\n    email: string\n    isAdmin: boolean\n    name: string\n    publicCardPacksCount: number\n    rememberMe: boolean\n    token: string\n    tokenDeathTime: number\n    updated: string\n    verified: boolean\n    __v: number\n    _id: string\n}","import {Dispatch} from 'redux'\nimport API from '../api/api'\nimport {setIsLoggedInAC} from './loginReducer'\n\nexport enum ACTIONS_TYPE {\n    SET_INITIALIZED_APP = 'appReducer/SET_INITIALIZED_APP',\n    CHANGE_STATUS= 'appReducer/CHANGE_STATUS',\n}\n\nconst initialState = {\n    isInitialized: false,\n    status: 'idle',\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        // case ACTIONS_TYPE.SET_INITIALIZED_APP:\n        //     return {...state, isInitialized: action.value}\n        case ACTIONS_TYPE.CHANGE_STATUS:\n            return {...state, isInitialized: action.value}\n        default:\n            return state\n    }\n}\nexport const isInitializedAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_INITIALIZED_APP, value} as const)\nexport const change_statusAC = (value: boolean) => ({type: ACTIONS_TYPE.CHANGE_STATUS, value} as const)\n// thunks\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    API.authMe()\n        .then(res => {\n            debugger\n            dispatch(isInitializedAC(true))\n    })\n}\n// types\ntype ActionsType =\n    | ReturnType<typeof isInitializedAC>\n    | ReturnType<typeof change_statusAC>","import API, {PassRecType} from '../api/api'\nimport {Dispatch} from 'redux'\n\nenum ACTION_TYPE {\n\tSET_OK = 'forgotReducer/SET_OK',\n\tSET_ERROR = 'forgotReducer/SET_ERROR',\n\tSET_OK_NEW_PASS = 'forgotReducer/SET_OK_NEW_PASS',\n\tSET_ERROR_NEW_PASS = 'forgotReducer/SET_ERROR_NEW_PASS'\n}\n\nconst initialState = {\n\tinfo: 'To recover your password, enter your registration email:',\n\tinfoNewPass: 'Enter you new password: ',\n\terror: '',\n\terrorNewPass: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n\tswitch (action.type) {\n\t\tcase ACTION_TYPE.SET_OK:\n\t\t\treturn {...state, info: action.info}\n\t\tcase ACTION_TYPE.SET_ERROR:\n\t\t\treturn {...state, error: action.error}\n\t\tcase ACTION_TYPE.SET_OK_NEW_PASS:\n\t\t\treturn {...state, infoNewPass: action.infoNewPass}\n\t\tcase ACTION_TYPE.SET_ERROR_NEW_PASS:\n\t\t\treturn {...state, errorNewPass: action.errorNewPass}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const setOkPassRecAC = (info: string) => ({type: ACTION_TYPE.SET_OK, info } as const)\nexport const setErrorPassRec = (error: string) => ({type: ACTION_TYPE.SET_ERROR, error} as const)\n\nexport const setOkNewPassAC = (infoNewPass: string) => ({type: ACTION_TYPE.SET_OK_NEW_PASS, infoNewPass} as const)\nexport const setErrorNewPass = (errorNewPass: string) => ({type: ACTION_TYPE.SET_ERROR_NEW_PASS, errorNewPass } as const)\n\n\nexport const sendEmailPassRecTC = (data: PassRecType) => (dispatch: Dispatch<ActionType>) => {\n\tAPI.passRec(data.email, data.from, data.message)\n\t\t.then(response => { dispatch(setOkPassRecAC( response.info ))})\n\t\t.catch(error => { dispatch(setErrorPassRec('Such email is not registered'))})\n}\n\nexport const newPassTC = (password: string, token: string) => (dispatch: Dispatch<ActionType>) => {\n\tAPI.newPass(password, token)\n\t\t.then(res => {dispatch(setOkNewPassAC('password change'))})\n\t\t.catch(err => {dispatch(setErrorNewPass('error new password'))})\n}\n\ntype ActionType = ReturnType<typeof setOkPassRecAC>\n\t\t\t\t\t\t\t\t| ReturnType<typeof setErrorPassRec>\n\t\t\t\t\t\t\t\t| ReturnType<typeof setOkNewPassAC>\n\t\t\t\t\t\t\t\t| ReturnType<typeof setErrorNewPass>","import React, {useEffect} from 'react'\nimport s from './Login.module.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button, Grid} from '@material-ui/core'\nimport {loginTC} from \"../../../redux/loginReducer\";\nimport {AppRootStateType} from \"../../../redux/store\";\nimport { Redirect } from 'react-router-dom';\nimport { initializeAppTC } from '../../../redux/appReducer';\nimport {setProfileAC} from '../../../redux/profileReducer'\n\n\nexport type AuthLoginType = {\n\temail: string\n\tpassword: string\n\trememberMe: true\n}\ntype FormikErrorType = {\n\temail?: string,\n\tpassword?: string,\n\trememberMe?: boolean,\n}\n\nexport const Login = () => {\n\tconst dispatch = useDispatch()\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n\n\tconst formik = useFormik({\n\t\tinitialValues: {\n\t\t\temail: 'nya-admin@nya.nya',\n\t\t\tpassword: '1qazxcvBG',\n\t\t\trememberMe: true\n\t\t},\n\t\tvalidate: (values: AuthLoginType) => {\n\t\t\tconst errors: FormikErrorType = {};\n\t\t\tif (!values.email) {\n\t\t\t\terrors.email = 'Поле email обязательно';\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n\t\t\t\terrors.email = 'Невалидный email';\n\t\t\t} if (!values.password) {\n\t\t\t\terrors.password = 'Поле обязательно';\n\t\t\t} else if(values.password.length < 3) {\n\t\t\t\terrors.password = 'Длина пароля должна быть больше 3 символов';\n\t\t\t}\n\t\t\treturn errors;\n\t\t},\n\t\tonSubmit: values => {\n\t\t\tdispatch(loginTC({email:values.email, password:values.password, rememberMe: values.rememberMe}))\n\t\t\tdispatch(initializeAppTC())\n\t\t\tformik.resetForm();\n\t\t},\n\t})\n\n\tif(isLoggedIn) {\n\t\treturn <Redirect to={'/profile'}/>\n\t}\n\n\treturn <Grid container justify=\"center\">\n\t\t<Grid item xs={4}>\n\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t<FormControl>\n\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t<p>To log in use common test account credentials:</p>\n\t\t\t\t\t\t<p><span>Email: </span> nya-admin@nya.nya</p>\n\t\t\t\t\t\t<p><span>Password: </span> 1qazxcvBG</p>\n\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\ttype=\"password\"\n\t\t\t\t\t\t\tlabel=\"Password\"\n\t\t\t\t\t\t\tmargin=\"normal\"\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n\t\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\t\tlabel={'Remember me'}\n\t\t\t\t\t\t\tcontrol={<Checkbox\n\t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n\t\t\t\t\t\t\t/>}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{formik.touched.rememberMe && formik.errors.rememberMe ? <div style={{color: \"red\"}}>{formik.errors.rememberMe}</div> : null}\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n\t\t\t\t\t</FormGroup>\n\t\t\t\t</FormControl>\n\t\t\t</form>\n\n\t\t</Grid>\n\t</Grid>\n}\n","import API, { RegistrationPostDataType } from \"../api/api\"\nimport {Dispatch} from 'redux'\n\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'authReducer/SET_IS_LOGIN',\n    SET_IS_REGISTERED = 'authReducer/SET_IS_REGISTERED',\n    SET_ERROR = 'authReducer/SET_ERROR',\n}\n\nconst initialState = {\n    isLogin: false,\n    isRegistered: false,\n    error: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLogin: action.value}\n        case ACTIONS_TYPE.SET_IS_REGISTERED:\n            return {...state, isRegistered: action.value}\n        case ACTIONS_TYPE.SET_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setIsLogin = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsRegistered = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_REGISTERED, value} as const)\nexport const setError = (error: string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)\n\n// thunks\nexport const setRegistration = (data: RegistrationPostDataType) => (dispatch: Dispatch) => {\n    API.registration(data.email, data.password)\n        .then(res => {\n            dispatch(setIsRegistered(true))})\n        .catch(err => {\n            // dispatch(setError(err.message))\n            dispatch(setError('Email already exists'))\n        })\n\n}\n\n// types\ntype ActionsType =\n    | ReturnType<typeof setIsLogin>\n    | ReturnType<typeof setIsRegistered>\n    | ReturnType<typeof setError>\n","import React from 'react'\nimport s from './NewPassword.module.css'\nimport {Button, Form, Input} from \"antd\"\nimport { newPassTC } from '../../../redux/forgotReducer'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport {AppRootStateType} from \"../../../redux/store\";\n\nexport const NewPassword = () => {\n\n\tconst dispatch = useDispatch()\n\tconst error = useSelector<AppRootStateType, string>(state => state.passRec.errorNewPass)\n\tconst infoNewPass = useSelector<AppRootStateType, string>(state => state.passRec.infoNewPass)\n\tconst history = useHistory()\n\n\tconst myToken = history.location.pathname.slice(10, history.location.pathname.length)\n\n\tconst layout = {\n\t\tlabelCol: {span: 8},\n\t\twrapperCol: {span: 16},\n\t}\n\n\tconst onFinish = (values: any) => {\n\t\tdispatch( newPassTC(values.newPassword1, myToken) );\n\t}\n\n\tconst onFinishFailed = (errorInfo: any) => {\n\t\tconsole.log('Failed:', errorInfo)\n\t}\n\n\treturn (\n\t\t<div className={s.newPassOverlay}>\n\t\t\t<span className={s.spanText}>{infoNewPass}</span>\n\t\t\t<Form  {...layout} name=\"basic\"\n\t\t\t       initialValues={{remember: true}}\n\t\t\t       onFinish={onFinish}\n\t\t\t       onFinishFailed={onFinishFailed}>\n\n\t\t\t\t<Form.Item label=\"new password: \" name=\"newPassword1\" hasFeedback\n\t\t\t\t           rules={[\n\t\t\t\t\t           {required: true, message: 'Please input your password!'},\n\t\t\t\t\t           ({getFieldValue}) => ({\n\t\t\t\t\t\t           validator(_, value) {\n\t\t\t\t\t\t\t           if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n\t\t\t\t\t\t\t           if (value.length > 8 || !value || getFieldValue('password1') === value) {\n\t\t\t\t\t\t\t\t           return Promise.resolve()\n\t\t\t\t\t\t\t           }\n\t\t\t\t\t\t\t           return Promise.reject(new Error('Two passwords do not match!'))\n\t\t\t\t\t\t           },\n\t\t\t\t\t           }),]}>\n\t\t\t\t\t<Input.Password/>\n\t\t\t\t</Form.Item>\n\n\t\t\t\t<Form.Item label=\"repeat password: \" name=\"newPassword2\"  hasFeedback\n\t\t\t\t           rules={[\n\t\t\t\t\t           {\n\t\t\t\t\t\t           required: true,\n\t\t\t\t\t\t           message: 'Please confirm your password!',\n\t\t\t\t\t           },\n\t\t\t\t\t           ({getFieldValue}) => ({\n\t\t\t\t\t\t           validator(_, value) {\n\t\t\t\t\t\t\t           if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n\t\t\t\t\t\t\t           if (value.length > 8 || !value || getFieldValue('password1') === value) {\n\t\t\t\t\t\t\t\t           return Promise.resolve()\n\t\t\t\t\t\t\t           }\n\t\t\t\t\t\t\t           return Promise.reject(new Error('Two passwords do not match!'))\n\t\t\t\t\t\t           },\n\t\t\t\t\t           }),\n\t\t\t\t           ]}>\n\t\t\t\t\t<Input.Password/>\n\t\t\t\t</Form.Item>\n\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">change password</Button>\n\n\t\t\t</Form>\n\t\t\t<div>{error}</div>\n\t\t</div>\n\t)\n}","import React from 'react'\nimport {Form, Input, Button } from 'antd'\nimport s from './PasswordRecovery.module.css'\nimport {sendEmailPassRecTC, setErrorPassRec} from \"../../../redux/forgotReducer\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppRootStateType} from \"../../../redux/store\"\n\nexport const PasswordRecovery = () => {\n\n\tconst dispatch = useDispatch()\n\n\tconst errorPassRec = useSelector<AppRootStateType, string>(state => state.passRec.error)\n\tconst infoPassRec = useSelector<AppRootStateType, string>(state => state.passRec.info)\n\n\tconst from = \"THE BEST MY TEAM baranov.sys@gmail.com\"\n\tconst message = `<div>\n\t\t\t\t\t\t\t\t\t\t\tвы отправили запрос на восстановления пароля, для продожения перейдите по ссылке:\n\t\t\t\t\t\t\t\t\t\t\t<a href='https://baranovaleksei.github.io/new-pass/$token$'>link</a>\n<!--\t\t\t\t\t\t\t\t\t\t\t<a href='http://localhost:3000/new-pass/$token$'>link</a>-->\n\t\t\t\t\t\t\t\t\t\t\tесли это были на Вы - то ничего не делайте\n\t\t\t\t\t\t\t\t\t</div>`\n\n\n\tconst onFinish = (values: any) => {\n\t\tdispatch(sendEmailPassRecTC({ email: values.emailRecPass, message: message, from: from}))\n\t\tsetTimeout(() => {\n\t\t\tdispatch(setErrorPassRec(''))\n\t\t}, 5000)\n\t}\n\n\treturn (\n\t\t<div className={s.passRecOverlay}>\n\n\t\t\t<span className={s.nameRecPass}>{infoPassRec}</span>\n\t\t\t<Form className={s.formRecPass}\n\t\t\t\tname=\"recoveryPass\"\n\t\t\t\tinitialValues={{ remember: true }}\n\t\t\t\tonFinish={onFinish}>\n\n\t\t\t\t<Form.Item\n\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\tname=\"emailRecPass\"\n\t\t\t\t\trules={[{ type: 'email', required: true, message: 'Please input your email' }]}\n\t\t\t\t>\n\t\t\t\t\t<Input />\n\n\t\t\t\t</Form.Item>\n\t\t\t\t\t<span className={s.nameRecPass}> {errorPassRec} </span>\n\t\t\t\t<Form.Item>\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\t\tsend message\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Item>\n\n\t\t\t</Form>\n\t\t</div>\n\t)\n\n}","import React from 'react'\nimport s from './Registration.module.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../../redux/store'\nimport {setError, setRegistration} from '../../../redux/authReducer'\nimport {Redirect} from 'react-router-dom'\nimport {Form, Input, Button} from 'antd'\n\n\nexport const Registration = () => {\n    const dispatch = useDispatch()\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\n    const error = useSelector<AppRootStateType, string>(state => state.auth.error)\n    const layout = {\n        labelCol: {span: 8},\n        wrapperCol: {span: 16},\n    }\n    const onFinish = (values: any) => {\n        dispatch(setRegistration({email: values.email, password: values.password1}))\n        setTimeout(() => {\n            dispatch(setError(''))\n        }, 10000)\n    }\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo)\n    }\n\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <div className={s.registrationOverlay}>\n\n\n            <Form  {...layout} name=\"basic\"  initialValues={{remember: true}} onFinish={onFinish}\n                   onFinishFailed={onFinishFailed}>\n                <Form.Item label=\"email\" name=\"email\"\n                    rules={[\n                        {required: true, message: 'Please input your email!'},\n                        {type: 'email', message: 'The input is not valid E-mail!',}\n                    ]}>\n                    <Input style={{width: '100%'}} />\n                </Form.Item>\n\n                <Form.Item label=\"Password1\" name=\"password1\" hasFeedback\n                           rules={[\n                               {required: true, message: 'Please input your password!'},\n                               ({getFieldValue}) => ({\n                                   validator(_, value) {\n                                       if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n                                       if (value.length > 8 || !value || getFieldValue('password1') === value) {\n                                           return Promise.resolve()\n                                       }\n                                       return Promise.reject(new Error('Two passwords do not match!'))\n                                   },\n                               }),]}>\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item label=\"Password2\" name=\"password2\"  hasFeedback\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        ({getFieldValue}) => ({\n                            validator(_, value) {\n                                if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n                                if (value.length > 8 || !value || getFieldValue('password1') === value) {\n                                    return Promise.resolve()\n                                }\n                                return Promise.reject(new Error('Two passwords do not match!'))\n                            },\n                        }),\n                    ]}>\n                    <Input.Password/>\n                </Form.Item>\n\n                <Button type=\"primary\" htmlType=\"submit\">Button</Button>\n                <div className={s.serverError}>{error}</div>\n            </Form>\n        </div>\n    )\n}\n","import React, {useEffect} from 'react'\nimport s from './Profile.module.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../../redux/store'\nimport {initializeAppTC} from '../../../redux/appReducer'\nimport {Redirect} from 'react-router-dom'\nimport {setProfileAC} from '../../../redux/profileReducer'\nimport {logOutTC, ProfileType} from '../../../redux/loginReducer'\n\nexport const Profile = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const profile = useSelector<AppRootStateType, ProfileType | null>(state => state.profile.profile)\n    const dispatch = useDispatch()\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'}/>\n    }\n    const logout = () => {\n    \tdispatch(logOutTC())\n\t}\n     return (\n        <div className={s.profileOverlay}>\n            {profile &&\n\t\t\t\t<div className={s.profile}>\n\t\t\t\t\t<img src={profile.avatar} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tname: {profile.name} <br/>\n\t\t\t\t\t\ttoken: {profile.token} <br/>\n\t\t\t\t\t\t_id: {profile._id}<br/>\n\t\t\t\t\t\temail: {profile.email}<br/>\n\t\t\t\t\t\tcreated: {profile.created}<br/>\n\t\t\t\t\t\tadmin: {profile.isAdmin ? 'yes' : 'no'}<br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div><button onClick={logout}>Log out</button></div>\n\n\t\t\t\t</div>\n\n            }\n        </div>\n    )\n}","import React, {useEffect} from 'react'\nimport {Switch, Route, Redirect} from 'react-router-dom'\nimport {Error404} from \"../Pages/Error404/Error404\";\nimport {Login} from \"../Pages/Login/Login\";\nimport {NewPassword} from \"../Pages/NewPassword/NewPassword\";\nimport {PasswordRecovery} from \"../Pages/PasswordRecovery/PasswordRecovery\";\nimport {Registration} from \"../Pages/Registration/Registration\";\nimport {Profile} from \"../Pages/Profile/Profile\";\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {initializeAppTC} from '../../redux/appReducer'\n\nexport const PATH = {\n\tLOGIN: '/login',\n\tREGISTRATION: '/registration',\n\tPASSWORD_RECOVERY: '/pass-recovery',\n\tNEW_PASSWORD: '/new-pass',\n\tPROFILE: '/profile'\n}\n\nfunction Routes() {\n\treturn (\n\t\t<div>\n\t\t\t<Switch>\n\t\t\t\t{/*в начале мы попадаем на страницу \"/\" и переходим сразу на страницу Login*/}\n\t\t\t\t{/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\n\t\t\t\t<Route path={\"/\"} exact render={ () => <Redirect to={ PATH.LOGIN }/> }/>\n\t\t\t\t<Route path={\"/teamProject\"} exact render={ () => <Profile/> }/>\n\n\t\t\t\t<Route path={ PATH.LOGIN } render={ () => <Login/> } />\n\t\t\t\t<Route path={ PATH.REGISTRATION } render={ () => <Registration /> } />\n\t\t\t\t<Route path={ PATH.PASSWORD_RECOVERY } render={ ()=> <PasswordRecovery/> } />\n\t\t\t\t<Route path={ PATH.NEW_PASSWORD } render={ ()=> <NewPassword/> } />\n\t\t\t\t<Route path={ PATH.PROFILE } render={ ()=> <Profile/> } />\n\n\t\t\t\t<Route path={'/404'} render={() => <Error404/>}/>\n\t\t\t\t<Redirect from={'*'} to={'/404'}/>\n\n\t\t\t</Switch>\n\t\t</div>\n\t)\n}\n\nexport default Routes","import React from 'react'\nimport s from './Header.module.css'\nimport {PATH} from \"../Routes/Routes\"\nimport {NavLink} from \"react-router-dom\"\n\nfunction Header() {\n\treturn (\n\t\t<div className={s.nav}>\n\t\t\t<button className={ s.menuHover }> Меню </button>\n\t\t\t<div className={s.items}>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to= { PATH.PROFILE } activeClassName = { s.activeLink }>Profile</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.LOGIN } activeClassName = { s.activeLink }>Login</NavLink>\n\t\t\t\t</div>\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.REGISTRATION } activeClassName = { s.activeLink }>Registration</NavLink>\n\t\t\t\t</div>\n\t\t\t\t{/*<div className={ s.item }>*/}\n\t\t\t\t{/*\t<NavLink to={ PATH.NEW_PASSWORD } activeClassName = { s.activeLink }>New password</NavLink>*/}\n\t\t\t\t{/*</div>*/}\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.PASSWORD_RECOVERY } activeClassName = { s.activeLink }>Password recovery</NavLink>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Header","import React from 'react'\nimport './App.css'\nimport {HashRouter, Redirect} from 'react-router-dom'\nimport Routes from './Component/Routes/Routes'\nimport Header from './Component/Header/Header'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './redux/store'\n\nfunction App() {\n    // const isInitialized = useSelector<AppRootStateType>(state => state.app.isInitialized)\n    // if (!isInitialized) {\n    //     return <Redirect to={'login'}/>\n    // }\n\n    return (\n        <>\n            <Header/>\n            <Routes/>\n        </>\n    )\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './appReducer'\nimport { authReducer } from './authReducer'\nimport {loginReducer} from \"./loginReducer\";\nimport {forgotReducer} from \"./forgotReducer\";\nimport { profileReducer } from './profileReducer';\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    app: appReducer,\n    login: loginReducer,\n    profile: profileReducer,\n    passRec: forgotReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3rYIR\",\"menuHover\":\"Header_menuHover__2eDeL\",\"items\":\"Header_items__3t3lP\",\"item\":\"Header_item__11opL\",\"activeLink\":\"Header_activeLink__3WAn0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passRecOverlay\":\"PasswordRecovery_passRecOverlay__dDdKX\",\"nameRecPass\":\"PasswordRecovery_nameRecPass__2C3uT\",\"formRecPass\":\"PasswordRecovery_formRecPass__l0PYz\"};"],"sourceRoot":""}