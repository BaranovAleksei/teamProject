{"version":3,"sources":["Component/Pages/Registration/Registration.module.css","Component/Pages/Profile/Profile.module.css","Component/Pages/Error404/Error404.module.css","Component/Pages/NewPassword/NewPassword.module.css","redux/profileReducer.ts","Component/Pages/Error404/Error404.tsx","api/api.ts","redux/loginReducer.ts","redux/appReducer.ts","redux/forgotReducer.ts","Component/Pages/Login/Login.tsx","Component/Pages/NewPassword/NewPassword.tsx","redux/authReducer.ts","Component/Pages/PasswordRecovery/PasswordRecovery.tsx","Component/Pages/Registration/Registration.tsx","Component/Pages/Profile/Profile.tsx","Component/Routes/Routes.tsx","Component/Header/Header.tsx","App.tsx","redux/store.ts","index.tsx","Component/Header/Header.module.css"],"names":["module","exports","ACTIONS_TYPE","Error404","className","s","errorOverlay","instance","axios","create","baseURL","withCredentials","headers","API","registration","email","password","post","then","response","data","authMe","get","res","login","rememberMe","logOut","delete","passRec","from","message","initialState","profile","isLoggedIn","error","setIsLoggedInAC","value","type","SET_IS_LOGIN","setIsErrorAC","SET_IS_ERROR","loginTC","dispatch","SET_PROFILE","catch","err","ACTION_TYPE","isInitialized","status","initializeAppTC","SET_INITIALIZED_APP","Login","useDispatch","useSelector","state","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","resetForm","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormGroup","TextField","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","checked","Button","variant","NewPassword","newPassOverlay","answer","html","info","success","passRecTC","SET_OK","PasswordRecovery","alignItems","height","isLogin","isRegistered","setError","SET_ERROR","setRegistration","SET_IS_REGISTERED","Registration","auth","registrationOverlay","labelCol","span","wrapperCol","name","remember","onFinish","password1","setTimeout","onFinishFailed","errorInfo","console","log","Item","rules","required","width","hasFeedback","getFieldValue","validator","_","Promise","reject","Error","resolve","Password","htmlType","serverError","Profile","profileOverlay","src","avatar","alt","token","_id","created","isAdmin","onClick","PATH","Routes","path","exact","render","Header","nav","menuHover","items","activeClassName","activeLink","App","rootReducer","combineReducers","action","app","CHANGE_STATUS","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e84a5f5e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationOverlay\":\"Registration_registrationOverlay__RaPqu\",\"serverError\":\"Registration_serverError__1TzMU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileOverlay\":\"Profile_profileOverlay__2Yrcx\",\"profile\":\"Profile_profile__3wCMr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorOverlay\":\"Error404_errorOverlay__35HNd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassOverlay\":\"NewPassword_newPassOverlay__b9vqv\"};","import API, {AuthLoginType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport { ProfileType } from './loginReducer'\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_PROFILE = 'loginReducer/SET_PROFILE',\r\n}\r\n\r\nconst initialState = {\r\n    profile: null as null | ProfileType\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_PROFILE:\r\n            return {...state, profile: action.profile}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setProfileAC = (profile: ProfileType) => ({type: ACTIONS_TYPE.SET_PROFILE, profile} as const)\r\n\r\n//thunks\r\n\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setProfileAC>\r\n","import React from 'react'\r\nimport s from './Error404.module.css'\r\n\r\nexport const Error404 = () => {\r\n\treturn (\r\n\t\t<div className={s.errorOverlay}>\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\t\t\tpage 404\r\n\r\n\t\t</div>\r\n\t)\r\n}","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/', //heroku\r\n    // baseURL: 'http://localhost:7542/2.0/',  //local\r\n    withCredentials: true,\r\n    headers: {}\r\n})\r\n\r\nexport const API = {\r\n    registration: (email: string, password: string) => {\r\n        return instance.post<RegistrationPostResponseType>('/auth/register', {email, password}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    authMe: () => {\r\n        return instance.get('auth/me').then(res => {\r\n            return res.data\r\n        })\r\n    },\r\n    login: (email: string | null, password: string | null, rememberMe: boolean = true) => {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe}).then(response => {\r\n            return response.data\r\n        })\r\n    },\r\n    logOut: () => {\r\n        return instance.delete<LogOutResponseType>(`auth/me`)\r\n    },\r\n    //for passRecovery\r\n    passRec: (email: string, from: string, message: string) => {\r\n        return instance.post<PassRecResponseType>('auth/forgot', {email, from, message}).then(response => {\r\n            return response.data\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default API\r\n\r\n\r\n//types\r\nexport type LogOutResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport type LoginResponseType = {\r\n    avatar: string\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: string\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type AuthLoginType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: true\r\n}\r\n\r\nexport type RegistrationPostDataType = { email: string, password: string }\r\nexport type RegistrationPostResponseType = { addedUser: any, error?: string }\r\n\r\n//for PasswordRec\r\nexport type PassRecType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\nexport type PassRecResponseType = {\r\n    answer: boolean\r\n    html: boolean\r\n    info: string\r\n    success: boolean\r\n}","import API, {AuthLoginType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setProfileAC} from './profileReducer'\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_IS_LOGIN = 'loginReducer/SET-IS-LOGGED-IN',\r\n    SET_IS_ERROR = 'loginReducer/SET-IS-ERROR',\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    error: '',\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_IS_LOGIN:\r\n            return {...state, isLoggedIn: action.value}\r\n        case ACTIONS_TYPE.SET_IS_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\r\nexport const setIsErrorAC = (error: string) => ({type: ACTIONS_TYPE.SET_IS_ERROR, error} as const)\r\n\r\n//thunks\r\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch) => {\r\n    API.login(data.email, data.password, data.rememberMe)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setProfileAC(res))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setIsErrorAC(err.error))\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    API.logOut()\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(false))\r\n        })\r\n        .catch(err => {\r\n            dispatch(setIsErrorAC(err.error))\r\n        })\r\n}\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setIsErrorAC>\r\n\r\nexport type ProfileType = {\r\n    avatar: string\r\n    created: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: string\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}","import {Dispatch} from 'redux'\r\nimport API from '../api/api'\r\nimport {setIsLoggedInAC} from './loginReducer'\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_INITIALIZED_APP = 'appReducer/SET_INITIALIZED_APP',\r\n    CHANGE_STATUS= 'appReducer/CHANGE_STATUS',\r\n}\r\n\r\nconst initialState = {\r\n    isInitialized: false,\r\n    status: 'idle',\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        // case ACTIONS_TYPE.SET_INITIALIZED_APP:\r\n        //     return {...state, isInitialized: action.value}\r\n        case ACTIONS_TYPE.CHANGE_STATUS:\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const isInitializedAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_INITIALIZED_APP, value} as const)\r\nexport const change_statusAC = (value: boolean) => ({type: ACTIONS_TYPE.CHANGE_STATUS, value} as const)\r\n// thunks\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    API.authMe()\r\n        .then(res => {\r\n            debugger\r\n            dispatch(isInitializedAC(true))\r\n    })\r\n}\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof isInitializedAC>\r\n    | ReturnType<typeof change_statusAC>","import API, {PassRecType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nenum ACTION_TYPE {\r\n\tSET_OK = 'forgotReducer/SET_OK'\r\n}\r\n\r\nconst initialState = {\r\n\tanswer: false,\r\n\thtml: false,\r\n\tinfo: '',\r\n\tsuccess: true\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\tswitch (action.type) {\r\n\t\tcase ACTION_TYPE.SET_OK:\r\n\t\t\treturn {...state, info: action.info, answer: true, html: true}\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nexport const setOkPassRecAC = (info: string) => ({type: ACTION_TYPE.SET_OK, info} as const)\r\n\r\nexport const passRecTC = (data: PassRecType) => (dispatch: Dispatch<ActionType>) => {\r\n\tAPI.passRec(data.email, data.from, data.message).then(res => {\r\n\t\tdispatch(setOkPassRecAC(res.info))\r\n\t})\r\n}\r\n\r\ntype ActionType = ReturnType<typeof setOkPassRecAC>","import React, {useEffect} from 'react'\r\nimport s from './Login.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button, Grid} from '@material-ui/core'\r\nimport {loginTC} from \"../../../redux/loginReducer\";\r\nimport {AppRootStateType} from \"../../../redux/store\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { initializeAppTC } from '../../../redux/appReducer';\r\nimport {setProfileAC} from '../../../redux/profileReducer'\r\n\r\n\r\nexport type AuthLoginType = {\r\n\temail: string\r\n\tpassword: string\r\n\trememberMe: true\r\n}\r\ntype FormikErrorType = {\r\n\temail?: string,\r\n\tpassword?: string,\r\n\trememberMe?: boolean,\r\n}\r\n\r\nexport const Login = () => {\r\n\tconst dispatch = useDispatch()\r\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: 'nya-admin@nya.nya',\r\n\t\t\tpassword: '1qazxcvBG',\r\n\t\t\trememberMe: true\r\n\t\t},\r\n\t\tvalidate: (values: AuthLoginType) => {\r\n\t\t\tconst errors: FormikErrorType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Поле email обязательно';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Невалидный email';\r\n\t\t\t} if (!values.password) {\r\n\t\t\t\terrors.password = 'Поле обязательно';\r\n\t\t\t} else if(values.password.length < 3) {\r\n\t\t\t\terrors.password = 'Длина пароля должна быть больше 3 символов';\r\n\t\t\t}\r\n\t\t\treturn errors;\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(loginTC({email:values.email, password:values.password, rememberMe: values.rememberMe}))\r\n\t\t\tdispatch(initializeAppTC())\r\n\t\t\tformik.resetForm();\r\n\t\t},\r\n\t})\r\n\r\n\tif(isLoggedIn) {\r\n\t\treturn <Redirect to={'/profile'}/>\r\n\t}\r\n\r\n\treturn <Grid container justify=\"center\">\r\n\t\t<Grid item xs={4}>\r\n\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t<FormControl>\r\n\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t<p>To log in use common test account credentials:</p>\r\n\t\t\t\t\t\t<p><span>Email: </span> nya-admin@nya.nya</p>\r\n\t\t\t\t\t\t<p><span>Password: </span> 1qazxcvBG</p>\r\n\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel=\"Email\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\t\t\tlabel=\"Password\"\r\n\t\t\t\t\t\t\tmargin=\"normal\"\r\n\t\t\t\t\t\t\t{...formik.getFieldProps('password')}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tlabel={'Remember me'}\r\n\t\t\t\t\t\t\tcontrol={<Checkbox\r\n\t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\r\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\r\n\t\t\t\t\t\t\t/>}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t{formik.touched.rememberMe && formik.errors.rememberMe ? <div style={{color: \"red\"}}>{formik.errors.rememberMe}</div> : null}\r\n\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n\t\t\t\t\t</FormGroup>\r\n\t\t\t\t</FormControl>\r\n\t\t\t</form>\r\n\r\n\t\t</Grid>\r\n\t</Grid>\r\n}\r\n","import React from 'react'\r\nimport s from './NewPassword.module.css'\r\n\r\nexport const NewPassword = () => {\r\n\treturn (\r\n\t\t<div className={s.newPassOverlay}>\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t\tNewPassword\r\n\t\t</div>\r\n\t)\r\n}","import API, { RegistrationPostDataType } from \"../api/api\"\r\nimport {Dispatch} from 'redux'\r\n\r\n\r\nexport enum ACTIONS_TYPE {\r\n    SET_IS_LOGIN = 'authReducer/SET_IS_LOGIN',\r\n    SET_IS_REGISTERED = 'authReducer/SET_IS_REGISTERED',\r\n    SET_ERROR = 'authReducer/SET_ERROR',\r\n}\r\n\r\nconst initialState = {\r\n    isLogin: false,\r\n    isRegistered: false,\r\n    error: ''\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case ACTIONS_TYPE.SET_IS_LOGIN:\r\n            return {...state, isLogin: action.value}\r\n        case ACTIONS_TYPE.SET_IS_REGISTERED:\r\n            return {...state, isRegistered: action.value}\r\n        case ACTIONS_TYPE.SET_ERROR:\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLogin = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\r\nexport const setIsRegistered = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_REGISTERED, value} as const)\r\nexport const setError = (error: string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)\r\n\r\n// thunks\r\nexport const setRegistration = (data: RegistrationPostDataType) => (dispatch: Dispatch) => {\r\n    API.registration(data.email, data.password)\r\n        .then(res => {\r\n            dispatch(setIsRegistered(true))})\r\n        .catch(err => {\r\n            // dispatch(setError(err.message))\r\n            dispatch(setError('Email already exists'))\r\n        })\r\n\r\n}\r\n\r\n// types\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLogin>\r\n    | ReturnType<typeof setIsRegistered>\r\n    | ReturnType<typeof setError>\r\n","import React from 'react'\r\nimport {useFormik} from 'formik'\r\nimport {Button, FormControl, FormGroup, Grid, TextField} from \"@material-ui/core\";\r\nimport {passRecTC} from \"../../../redux/forgotReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype PassRecType = {\r\n\temail: string\r\n\tfrom: string\r\n\tmessage: string\r\n}\r\n\r\nexport const PasswordRecovery = () => {\r\n\r\n\ttype FormikErrosType = {\r\n\t\temail?: string\r\n\t}\r\n\tconst dispatch = useDispatch()\r\n\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\temail: '',\r\n\t\t\tfrom: 'test-front-admin <baranov.sys@gmail.com>',\r\n\t\t\tmessage: `<div style=\"background-color: lime;padding: 15px> password recovery link: \r\n<a href='http://localhost:3000/teamProject#/new-pass/$token$'>link </a> </div>`\r\n\t\t},\r\n\t\tvalidate: (values: PassRecType) => {\r\n\t\t\tconst errors: FormikErrosType = {};\r\n\t\t\tif (!values.email) {\r\n\t\t\t\terrors.email = 'Обезательно для ввода';\r\n\t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n\t\t\t\terrors.email = 'Не корректный email';\r\n\t\t\t}\r\n\t\t\treturn errors\r\n\t\t},\r\n\t\tonSubmit: values => {\r\n\t\t\tdispatch(passRecTC ({email: values.email, from: values.from, message: values.message} ))\r\n\t\t\tformik.resetForm()\r\n\t\t}\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Grid container justify=\"center\" alignItems=\"stretch\" style={{height: '100vh'}}>\r\n\t\t\t<Grid container justify=\"center\" alignItems=\"center\" >\r\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t<FormGroup>\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tlabel='Email'\r\n\t\t\t\t\t\t\t\tmargin = 'normal'\r\n\t\t\t\t\t\t\t\t{...formik.getFieldProps('email')}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t{ formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\r\n\t\t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Send email</Button>\r\n\t\t\t\t\t\t</FormGroup>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t</form>\r\n\t\t\t</Grid>\r\n\t\t</Grid>\r\n\t)\r\n}","import React from 'react'\r\nimport s from './Registration.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../../redux/store'\r\nimport {setError, setRegistration} from '../../../redux/authReducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {Form, Input, Button} from 'antd'\r\n\r\n\r\nexport const Registration = () => {\r\n    const dispatch = useDispatch()\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\r\n    const error = useSelector<AppRootStateType, string>(state => state.auth.error)\r\n    const layout = {\r\n        labelCol: {span: 8},\r\n        wrapperCol: {span: 16},\r\n    }\r\n    const onFinish = (values: any) => {\r\n        dispatch(setRegistration({email: values.email, password: values.password1}))\r\n        setTimeout(() => {\r\n            dispatch(setError(''))\r\n        }, 10000)\r\n    }\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n        console.log('Failed:', errorInfo)\r\n    }\r\n\r\n\r\n    if (isRegistered) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.registrationOverlay}>\r\n\r\n\r\n            <Form  {...layout} name=\"basic\"  initialValues={{remember: true}} onFinish={onFinish}\r\n                   onFinishFailed={onFinishFailed}>\r\n                <Form.Item label=\"email\" name=\"email\"\r\n                    rules={[\r\n                        {required: true, message: 'Please input your email!'},\r\n                        {type: 'email', message: 'The input is not valid E-mail!',}\r\n                    ]}>\r\n                    <Input style={{width: '100%'}} />\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Password1\" name=\"password1\" hasFeedback\r\n                           rules={[\r\n                               {required: true, message: 'Please input your password!'},\r\n                               ({getFieldValue}) => ({\r\n                                   validator(_, value) {\r\n                                       if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\r\n                                       if (value.length > 8 || !value || getFieldValue('password1') === value) {\r\n                                           return Promise.resolve()\r\n                                       }\r\n                                       return Promise.reject(new Error('Two passwords do not match!'))\r\n                                   },\r\n                               }),]}>\r\n                    <Input.Password/>\r\n                </Form.Item>\r\n\r\n                <Form.Item label=\"Password2\" name=\"password2\"  hasFeedback\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: 'Please confirm your password!',\r\n                        },\r\n                        ({getFieldValue}) => ({\r\n                            validator(_, value) {\r\n                                if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\r\n                                if (value.length > 8 || !value || getFieldValue('password1') === value) {\r\n                                    return Promise.resolve()\r\n                                }\r\n                                return Promise.reject(new Error('Two passwords do not match!'))\r\n                            },\r\n                        }),\r\n                    ]}>\r\n                    <Input.Password/>\r\n                </Form.Item>\r\n\r\n                <Button type=\"primary\" htmlType=\"submit\">Button</Button>\r\n                <div className={s.serverError}>{error}</div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport s from './Profile.module.css'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../../redux/store'\r\nimport {initializeAppTC} from '../../../redux/appReducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {setProfileAC} from '../../../redux/profileReducer'\r\nimport {logOutTC, ProfileType} from '../../../redux/loginReducer'\r\n\r\nexport const Profile = () => {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\r\n    const profile = useSelector<AppRootStateType, ProfileType | null>(state => state.profile.profile)\r\n    const dispatch = useDispatch()\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    const logout = () => {\r\n    \tdispatch(logOutTC())\r\n\t}\r\n     return (\r\n        <div className={s.profileOverlay}>\r\n            {profile &&\r\n\t\t\t\t<div className={s.profile}>\r\n\t\t\t\t\t<img src={profile.avatar} alt=\"\"/>\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t\tname: {profile.name} <br/>\r\n\t\t\t\t\t\ttoken: {profile.token} <br/>\r\n\t\t\t\t\t\t_id: {profile._id}<br/>\r\n\t\t\t\t\t\temail: {profile.email}<br/>\r\n\t\t\t\t\t\tcreated: {profile.created}<br/>\r\n\t\t\t\t\t\tadmin: {profile.isAdmin ? 'yes' : 'no'}<br/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div><button onClick={logout}>Log out</button></div>\r\n\r\n\t\t\t\t</div>\r\n\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react'\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport {Error404} from \"../Pages/Error404/Error404\";\r\nimport {Login} from \"../Pages/Login/Login\";\r\nimport {NewPassword} from \"../Pages/NewPassword/NewPassword\";\r\nimport {PasswordRecovery} from \"../Pages/PasswordRecovery/PasswordRecovery\";\r\nimport {Registration} from \"../Pages/Registration/Registration\";\r\nimport {Profile} from \"../Pages/Profile/Profile\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../redux/store'\r\nimport {initializeAppTC} from '../../redux/appReducer'\r\n\r\nexport const PATH = {\r\n\tLOGIN: '/login',\r\n\tREGISTRATION: '/registration',\r\n\tPASSWORD_RECOVERY: '/pass-recovery',\r\n\tNEW_PASSWORD: '/new-pass',\r\n\tPROFILE: '/profile'\r\n}\r\n\r\nfunction Routes() {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Switch>\r\n\t\t\t\t{/*в начале мы попадаем на страницу \"/\" и переходим сразу на страницу Login*/}\r\n\t\t\t\t{/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\r\n\t\t\t\t<Route path={\"/\"} exact render={ () => <Redirect to={ PATH.LOGIN }/> }/>\r\n\t\t\t\t<Route path={\"/teamProject\"} exact render={ () => <Profile/> }/>\r\n\r\n\t\t\t\t<Route path={ PATH.LOGIN } render={ () => <Login/> } />\r\n\t\t\t\t<Route path={ PATH.REGISTRATION } render={ () => <Registration /> } />\r\n\t\t\t\t<Route path={ PATH.PASSWORD_RECOVERY } render={ ()=> <PasswordRecovery/> } />\r\n\t\t\t\t<Route path={ PATH.NEW_PASSWORD } render={ ()=> <NewPassword/> } />\r\n\t\t\t\t<Route path={ PATH.PROFILE } render={ ()=> <Profile/> } />\r\n\r\n\t\t\t\t<Route path={'/404'} render={() => <Error404/>}/>\r\n\t\t\t\t<Redirect from={'*'} to={'/404'}/>\r\n\r\n\t\t\t</Switch>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Routes","import React from 'react'\r\nimport s from './Header.module.css'\r\nimport {PATH} from \"../Routes/Routes\"\r\nimport {NavLink} from \"react-router-dom\"\r\n\r\nfunction Header() {\r\n\treturn (\r\n\t\t<div className={s.nav}>\r\n\t\t\t<button className={ s.menuHover }> Меню </button>\r\n\t\t\t<div className={s.items}>\r\n\t\t\t\t<div className={ s.item }>\r\n\t\t\t\t\t<NavLink to= { PATH.PROFILE } activeClassName = { s.activeLink }>Profile</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={ s.item }>\r\n\t\t\t\t\t<NavLink to={ PATH.LOGIN } activeClassName = { s.activeLink }>Login</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={ s.item }>\r\n\t\t\t\t\t<NavLink to={ PATH.REGISTRATION } activeClassName = { s.activeLink }>Registration</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={ s.item }>\r\n\t\t\t\t\t<NavLink to={ PATH.NEW_PASSWORD } activeClassName = { s.activeLink }>New password</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={ s.item }>\r\n\t\t\t\t\t<NavLink to={ PATH.PASSWORD_RECOVERY } activeClassName = { s.activeLink }>Password recovery</NavLink>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport './App.css'\r\nimport {HashRouter, Redirect} from 'react-router-dom'\r\nimport Routes from './Component/Routes/Routes'\r\nimport Header from './Component/Header/Header'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './redux/store'\r\n\r\nfunction App() {\r\n    // const isInitialized = useSelector<AppRootStateType>(state => state.app.isInitialized)\r\n    // if (!isInitialized) {\r\n    //     return <Redirect to={'login'}/>\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <Routes/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './appReducer'\r\nimport { authReducer } from './authReducer'\r\nimport {loginReducer} from \"./loginReducer\";\r\nimport {forgotReducer} from \"./forgotReducer\";\r\nimport { profileReducer } from './profileReducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    profile: profileReducer,\r\n    passRec: forgotReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport {Provider} from 'react-redux'\r\nimport {store} from './redux/store'\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n)\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__YEG9I\",\"menuHover\":\"Header_menuHover__1-ba6\",\"items\":\"Header_items__3vuA9\",\"item\":\"Header_item__3Lz70\",\"activeLink\":\"Header_activeLink__2EW1e\"};"],"sourceRoot":""}