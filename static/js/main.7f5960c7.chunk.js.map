{"version":3,"sources":["Component/Pages/NewPassword/NewPassword.module.css","Component/Pages/Registration/Registration.module.css","Component/Pages/Profile/Profile.module.css","Component/Pages/Error404/Error404.module.css","Component/Loading/Loading.module.css","Component/Pagination/Pagination.module.css","redux/profileReducer.ts","Component/Pages/Error404/Error404.tsx","api/api.ts","redux/authReducer.ts","redux/appReducer.ts","redux/loginReducer.ts","redux/forgotReducer.ts","Component/Pages/Login/Login.tsx","redux/packReducer.ts","Component/Pages/NewPassword/NewPassword.tsx","Component/Pages/PasswordRecovery/PasswordRecovery.tsx","Component/Pages/Registration/Registration.tsx","assets/img/Pulse.svg","Component/Loading/loading.tsx","Component/Pages/Profile/Profile.tsx","redux/cardsReducer.ts","Component/Pagination/Pagination.tsx","Component/Packs/Packs.tsx","Component/Cards/Cards.tsx","Component/Routes/Routes.tsx","Component/Header/Header.tsx","App.tsx","redux/store.ts","index.tsx","Component/Header/Header.module.css","Component/Packs/Packs.module.css","Component/Cards/Cards.module.css","Component/Pages/PasswordRecovery/PasswordRecovery.module.css"],"names":["module","exports","ACTIONS_TYPE","Error404","className","s","errorOverlay","instance","axios","create","baseURL","withCredentials","headers","API","email","password","post","then","response","data","rememberMe","delete","from","message","resetPasswordToken","APIpack","pageNumber","userID","name","get","res","cardsPack","deckCover","private","id","idPack","put","_id","packId","page","question","answer","card","cardsPack_id","cardId","initialState","profile","isLogin","isRegistered","error","setIsLogin","value","type","SET_IS_LOGIN","setError","SET_ERROR","setRegistration","dispatch","SET_IS_REGISTERED","catch","err","isInitialized","status","isInitializedAC","SET_INITIALIZED_APP","change_statusAC","CHANGE_STATUS","ACTION_TYPE","isLoggedIn","setIsLoggedInAC","setIsErrorAC","SET_IS_ERROR","loginTC","SET_PROFILE","Login","useDispatch","useSelector","state","login","to","initialValues","remember","onFinish","values","Item","initialValue","rules","required","prefix","UserOutlined","placeholder","LockOutlined","valuePropName","noStyle","href","htmlType","info","infoNewPass","errorNewPass","setErrorPassRec","setErrorNewPass","SET_ERROR_NEW_PASS","sendEmailPassRecTC","SET_OK","newPassTC","SET_OK_NEW_PASS","NewPassword","passRec","history","useHistory","location","pathname","slice","length","newPassOverlay","spanText","labelCol","span","wrapperCol","newPassword1","setTimeout","onFinishFailed","errorInfo","console","log","label","hasFeedback","getFieldValue","validator","_","Promise","reject","Error","resolve","Password","PasswordRecovery","errorPassRec","infoPassRec","passRecOverlay","nameRecPass","formRecPass","emailRecPass","Registration","auth","registrationOverlay","password1","style","width","serverError","Loading","loading","src","img","alt","Profile","app","profileOverlay","avatar","token","created","isAdmin","onClick","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","pageCount","setCardPacksAC","packs","SET_CARD_PACKS","setCurrentPage","SET_CURRENT_PAGE","getCardPacksTC","SET_PAGE_COUNT","SET_PACKS_TOTAL_COUNT","setCardPacksTotalCountAC","addNewCardPackTC","newCardsPack","ADD_NEW_PACKS_CARD","deleteCardPackTC","idCard","DELETE_PACK_CARD","updateCardPackTC","newName","UPDATE_PACK_CARD","updateCardPackAC","PaginationComp","props","pagination","showQuickJumper","current","currentPage","total","totalItemCount","onChange","onChangePage","cards","packUserId","cardsTotalCount","setCards","SET_CARDS","getCardsTC","SET_PACK_USER_ID","JSON","stringify","addCardTC","ADD_CARD","updateCardTC","UPDATE_CARD","Packs","useState","pack","useEffect","container","header","mainHeaderInfo","descr","buttons","shape","marginRight","sortPacks","icon","FolderAddOutlined","map","k","i","wrapper","SET_PACK_ID","cardPacksWrapper","mainInfo","cardsCount","updated","user_id","updateOfPack","EditTwoTone","DeleteTwoTone","Cards","setPacks","addCard","setAddCard","updateCard","setUpdateCard","validateMessages","onFinish2","layout","popup","offset","RollbackOutlined","disabled","c","packCards","textAlign","noCards","PATH","Routes","path","exact","render","Header","nav","menuHover","items","item","activeClassName","activeLink","App","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.7f5960c7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPassOverlay\":\"NewPassword_newPassOverlay__1SDdp\",\"spanText\":\"NewPassword_spanText__3l6cJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registrationOverlay\":\"Registration_registrationOverlay__3EAxe\",\"serverError\":\"Registration_serverError__1DKFD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileOverlay\":\"Profile_profileOverlay__2Mdwa\",\"profile\":\"Profile_profile__3pHxS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorOverlay\":\"Error404_errorOverlay__2XWN1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3k7SO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"Pagination_pagination__8TMzi\"};","\nexport enum ACTIONS_TYPE {\n    SET_PROFILE = 'loginReducer/SET_PROFILE',\n}\nexport type ProfileType = {\n    avatar: string\n    created: string\n    email: string\n    isAdmin: boolean\n    name: string\n    publicCardPacksCount: number\n    rememberMe: boolean\n    token: string\n    tokenDeathTime: number\n    updated: string\n    verified: boolean\n    __v: number\n    _id: string\n}\nconst initialState = {\n    profile: null as null | ProfileType\n}\ntype InitialStateType = typeof initialState\n\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_PROFILE:\n            return {...state, profile: action.profile}\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const setProfileAC = (profile: ProfileType) => ({type: ACTIONS_TYPE.SET_PROFILE, profile} as const)\n\n//thunks\n\n\n//types\ntype ActionsType = ReturnType<typeof setProfileAC>\n","import React from 'react'\nimport s from './Error404.module.css'\n\nexport const Error404 = () => {\n\treturn (\n\t\t<div className={s.errorOverlay}>\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\t\t\tpage 404\n\n\t\t</div>\n\t)\n}","import axios from 'axios'\nimport {CardPackType} from \"../redux/packReducer\";\n\nconst instance = axios.create({\n    baseURL: 'https://neko-back.herokuapp.com/2.0/', //heroku\n    // baseURL: 'http://localhost:7542/2.0/',  //local\n    withCredentials: true,\n    headers: {}\n})\n\nexport const API = {\n    registration: (email: string, password: string) => {\n        return instance.post<RegistrationPostResponseType>('/auth/register', {email, password}).then(response => {\n            return response.data\n        })\n    },\n    authMe: () => {\n        return instance.get('auth/me').then(res => {\n            return res.data\n        })\n    },\n    login: (email: string | null, password: string | null, rememberMe: boolean = true) => {\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe}).then(response => {\n            return response.data\n        })\n    },\n    logOut: () => {\n        return instance.delete<LogOutResponseType>(`auth/me`)\n    },\n    //for passRecovery\n    passRec: (email: string, from: string, message: string) => {\n        return instance.post<PassRecResponseType>('auth/forgot', {email, from, message})\n          .then(response => { return response.data })\n    },\n    newPass: (password: string, resetPasswordToken: string) => {\n        return instance.post<NewPassResponseType> ('auth/set-new-password', {password, resetPasswordToken})\n          .then(response => { return response.data })\n    }\n\n}\n\n//API for PACS\nexport const APIpack = {\n    getCardPacks:( pageNumber: number = 1, userID?: string, name: string = '' ) => {\n        if (!userID) {\n            return instance.get<GetCardPacksResponseType>(`cards/pack?packName=${name}&page=${pageNumber}&pageCount=10`)\n                .then(res => res.data)\n        }\n        return instance.get<GetCardPacksResponseType>(`cards/pack?user_id=${userID}&page=${pageNumber}&pageCount=10`)\n            .then(res => res.data)\n    },\n    addPack: () => {\n        return instance.post<any>(`cards/pack`, {\n            cardsPack: {\n                name: 'new pack from the swords team',\n                deckCover: '',\n                private: false\n            }\n        })\n            .then(res => res.data)\n    },\n    deletePack: (id: string) => {\n        return instance.delete<any>(`cards/pack?id=${id}`)\n            .then(res => res.data)\n    },\n    updatePack: (idPack: string) => {\n        return instance.put<any>(`cards/pack`, {\n            cardsPack: {\n                _id: idPack,\n                name: 'new name',\n                deckCover: \"\"\n            }\n        })\n            .then(res => res.data)\n    },\n    //for cards\n    getCards: (packId: string, page: number = 1) => {\n        return instance.get(`cards/card?cardsPack_id=${packId}&page=${page}`)\n            .then(res => {\n                return res\n            })\n    },\n    addCard: (packId: string, question: string = 'no question',answer: string = 'no answer' ) => {\n        return instance.post(`cards/card`, {card:{cardsPack_id: packId, question, answer}}).then(res => {\n            return res\n        })\n    },\n    updateCard: (cardId: string, question: string = 'no question',answer: string = 'no answer' ) => {\n        return instance.put(`cards/card`, {card:{_id: cardId, question, answer}}).then(res => {\n            return res\n        })\n    },\n}\n//API for CARDS\n\n\n\n//types\nexport type LogOutResponseType = {\n    info: string\n    error: string\n}\n\nexport type LoginResponseType = {\n    avatar: string\n    created: string\n    email: string\n    isAdmin: boolean\n    name: string\n    publicCardPacksCount: number\n    rememberMe: boolean\n    token: string\n    tokenDeathTime: number\n    updated: string\n    verified: boolean\n    __v: number\n    _id: string\n}\n\nexport type AuthLoginType = {\n    email: string\n    password: string\n    rememberMe: true\n}\n\nexport type RegistrationPostDataType = { email: string, password: string }\nexport type RegistrationPostResponseType = { addedUser: any, error?: string }\n\n//for PasswordRec\nexport type PassRecType = {\n    email: string\n    from: string\n    message: string\n}\nexport type PassRecResponseType = {\n    answer: boolean\n    html: boolean\n    info: string\n    success: boolean\n}\n\n//types for Cards\nexport type GetCardPacksResponseType = {\n    cardPacks: Array<CardPackType>\n    cardPacksTotalCount: number\n    maxCardsCount: number\n    minCardsCount: number\n    page: number\n    pageCount: number\n}\n\nexport type AddPackType = {\n    name?: string\n    deckCover?: string\n    private?: boolean\n}\n\nexport type UpdatePackType = {\n    _id: string\n    name?: string\n}\n\nexport type NewPassResponseType = {\n    info: string\n    error: string\n}\n","import  { RegistrationPostDataType, API} from \"../api/api\"\nimport {Dispatch} from 'redux'\nimport {change_statusAC} from './appReducer'\n\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'authReducer/SET_IS_LOGIN',\n    SET_IS_REGISTERED = 'authReducer/SET_IS_REGISTERED',\n    SET_ERROR = 'authReducer/SET_ERROR',\n}\n\nconst initialState = {\n    isLogin: false,\n    isRegistered: false,\n    error: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLogin: action.value}\n        case ACTIONS_TYPE.SET_IS_REGISTERED:\n            return {...state, isRegistered: action.value}\n        case ACTIONS_TYPE.SET_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\nexport const setIsLogin = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsRegistered = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_REGISTERED, value} as const)\nexport const setError = (error: string) => ({type: ACTIONS_TYPE.SET_ERROR, error} as const)\n\n// thunks\nexport const setRegistration = (data: RegistrationPostDataType) => (dispatch: Dispatch) => {\n    API.registration(data.email, data.password)\n        .then(res => {\n            dispatch(setIsRegistered(true))\n        })\n        .catch(err => {\n            dispatch(setError('Email already exists'))\n\n        })\n\n}\n\n// types\ntype ActionsType =\n    | ReturnType<typeof setIsLogin>\n    | ReturnType<typeof setIsRegistered>\n    | ReturnType<typeof setError>\n","import {Dispatch} from 'redux'\nimport {API} from \"../api/api\";\n\nexport enum ACTIONS_TYPE {\n    SET_INITIALIZED_APP = 'appReducer/SET_INITIALIZED_APP',\n    CHANGE_STATUS= 'appReducer/CHANGE_STATUS',\n}\ntype StatusType = 'idle' | 'loading' | 'success' | 'failed'\nconst initialState = {\n    isInitialized: false,\n    status: 'idle' as StatusType,\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_INITIALIZED_APP:\n            return {...state, isInitialized: action.value}\n        case ACTIONS_TYPE.CHANGE_STATUS:\n            return {...state, status: action.value}\n        default:\n            return state\n    }\n}\nexport const isInitializedAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_INITIALIZED_APP, value} as const)\nexport const change_statusAC = (value: StatusType) => ({type: ACTIONS_TYPE.CHANGE_STATUS, value} as const)\n// thunks\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    API.authMe()\n        .then(res => {\n            dispatch(isInitializedAC(true))\n    })\n}\n// types\nexport type ChangeStatusType = ReturnType<typeof change_statusAC>\ntype ActionsType =\n    | ReturnType<typeof isInitializedAC>\n    | ChangeStatusType\n","import  {AuthLoginType, API} from '../api/api'\nimport {Dispatch} from 'redux'\nimport {setProfileAC} from './profileReducer'\nimport {setIsLogin} from \"./authReducer\";\nimport {change_statusAC, initializeAppTC, isInitializedAC} from './appReducer'\n\nexport enum ACTIONS_TYPE {\n    SET_IS_LOGIN = 'loginReducer/SET-IS-LOGGED-IN',\n    SET_IS_ERROR = 'loginReducer/SET-IS-ERROR',\n}\n\nconst initialState = {\n    isLoggedIn: false,\n    error: '',\n}\ntype InitialStateType = typeof initialState\n\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_IS_LOGIN:\n            return {...state, isLoggedIn: action.value}\n        case ACTIONS_TYPE.SET_IS_ERROR:\n            return {...state, error: action.error}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setIsLoggedInAC = (value: boolean) => ({type: ACTIONS_TYPE.SET_IS_LOGIN, value} as const)\nexport const setIsErrorAC = (error: string) => ({type: ACTIONS_TYPE.SET_IS_ERROR, error} as const)\n\n//thunks\nexport const loginTC = (data: AuthLoginType) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    API.login(data.email, data.password, data.rememberMe)\n        .then(res => {\n\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setIsLogin(true))\n            dispatch(isInitializedAC(true))\n            dispatch(setProfileAC(res))\n            initializeAppTC()\n            dispatch(change_statusAC('success'))\n\n        })\n        .catch(err => {\n            dispatch(change_statusAC('failed'))\n            dispatch(setIsErrorAC(err.error))\n        })\n}\nexport const logOutTC = () => (dispatch: Dispatch) => {\n    API.logOut()\n        .then(res => {\n            dispatch(change_statusAC('loading'))\n            dispatch(setIsLoggedInAC(false))\n            dispatch(setIsLogin(false))\n            dispatch(isInitializedAC(false))\n            dispatch(change_statusAC('success'))\n        })\n        .catch(err => {\n            dispatch(change_statusAC('failed'))\n            dispatch(setIsErrorAC(err.error))\n        })\n}\n\n//types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setIsErrorAC>\n\n\n","import {PassRecType, API} from '../api/api'\nimport {Dispatch} from 'redux'\nimport {change_statusAC} from './appReducer'\n\nenum ACTION_TYPE {\n\tSET_OK = 'forgotReducer/SET_OK',\n\tSET_ERROR = 'forgotReducer/SET_ERROR',\n\tSET_OK_NEW_PASS = 'forgotReducer/SET_OK_NEW_PASS',\n\tSET_ERROR_NEW_PASS = 'forgotReducer/SET_ERROR_NEW_PASS'\n}\n\nconst initialState = {\n\tinfo: 'To recover your password, enter your registration email:',\n\tinfoNewPass: 'Enter you new password: ',\n\terror: '',\n\terrorNewPass: ''\n}\n\ntype InitialStateType = typeof initialState\n\nexport const forgotReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\n\tswitch (action.type) {\n\t\tcase ACTION_TYPE.SET_OK:\n\t\t\treturn {...state, info: action.info}\n\t\tcase ACTION_TYPE.SET_ERROR:\n\t\t\treturn {...state, error: action.error}\n\t\tcase ACTION_TYPE.SET_OK_NEW_PASS:\n\t\t\treturn {...state, infoNewPass: action.infoNewPass}\n\t\tcase ACTION_TYPE.SET_ERROR_NEW_PASS:\n\t\t\treturn {...state, errorNewPass: action.errorNewPass}\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n\nexport const setOkPassRecAC = (info: string) => ({type: ACTION_TYPE.SET_OK, info } as const)\nexport const setErrorPassRec = (error: string) => ({type: ACTION_TYPE.SET_ERROR, error} as const)\n\nexport const setOkNewPassAC = (infoNewPass: string) => ({type: ACTION_TYPE.SET_OK_NEW_PASS, infoNewPass} as const)\nexport const setErrorNewPass = (errorNewPass: string) => ({type: ACTION_TYPE.SET_ERROR_NEW_PASS, errorNewPass } as const)\n\n\nexport const sendEmailPassRecTC = (data: PassRecType) => (dispatch: Dispatch) => {\n\tAPI.passRec(data.email, data.from, data.message)\n\t\t.then(response => {\n\t\t\tdispatch(change_statusAC('loading'))\n\t\t\tdispatch(setOkPassRecAC( response.info ))\n\t\t\tdispatch(change_statusAC('success'))\n\t\t})\n\t\t.catch(error => {\n\t\t\tdispatch(setErrorPassRec('Such email is not registered'))\n\t\t\tdispatch(change_statusAC('failed'))\n\t\t})\n}\n\nexport const newPassTC = (password: string, resetPasswordToken: string) => (dispatch: Dispatch) => {\n\tAPI.newPass(password, resetPasswordToken)\n\t\t.then(res => {\n\t\t\tdispatch(change_statusAC('loading'))\n\t\t\tdispatch(setOkNewPassAC('password change'))\n\t\t\tdispatch(change_statusAC('success'))\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(change_statusAC('failed'))\n\t\t\tdispatch(setErrorNewPass('error new password'))})\n}\n\ntype ActionType = ReturnType<typeof setOkPassRecAC>\n  \t\t\t\t\t\t\t| ReturnType<typeof setErrorPassRec>\n\t\t\t\t\t\t\t\t| ReturnType<typeof setOkNewPassAC>\n\t\t\t\t\t\t\t\t| ReturnType<typeof setErrorNewPass>\n\n","import React, {useEffect} from 'react'\nimport s from './Login.module.css'\nimport './login.css'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useFormik} from \"formik\";\n// import {Checkbox, FormControl, FormControlLabel, FormGroup, TextField, Button, Grid} from '@material-ui/core'\nimport {loginTC} from \"../../../redux/loginReducer\";\nimport {AppRootStateType} from \"../../../redux/store\";\nimport {NavLink, Redirect } from 'react-router-dom';\nimport { initializeAppTC } from '../../../redux/appReducer';\nimport { Form, Input, Button, Checkbox } from 'antd';\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\nimport {stat} from 'fs'\n\n\n//\n// export type AuthLoginType = {\n// \temail: string\n// \tpassword: string\n// \trememberMe: true\n// }\n// type FormikErrorType = {\n// \temail?: string,\n// \tpassword?: string,\n// \trememberMe?: boolean,\n// }\n//\n// export const Login = () => {\n// \tconst dispatch = useDispatch()\n// \tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n//\n//\n// \tconst formik = useFormik({\n// \t\tinitialValues: {\n// \t\t\t// email: 'nya-admin@nya.nya',\n// \t\t\t// password: '1qazxcvBG',\n// \t\t\temail: 'baranov.sys@gmail.com',\n// \t\t\tpassword: '123456789',\n// \t\t\trememberMe: true\n//\n// \t\t},\n// \t\tvalidate: (values: AuthLoginType) => {\n// \t\t\tconst errors: FormikErrorType = {};\n// \t\t\tif (!values.email) {\n// \t\t\t\terrors.email = 'Поле email обязательно';\n// \t\t\t} else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n// \t\t\t\terrors.email = 'Невалидный email';\n// \t\t\t} if (!values.password) {\n// \t\t\t\terrors.password = 'Поле обязательно';\n// \t\t\t} else if(values.password.length < 3) {\n// \t\t\t\terrors.password = 'Длина пароля должна быть больше 3 символов';\n// \t\t\t}\n// \t\t\treturn errors;\n// \t\t},\n// \t\tonSubmit: values => {\n// \t\t\tdispatch(loginTC({email:values.email, password:values.password, rememberMe: values.rememberMe}))\n// \t\t\tformik.resetForm();\n// \t\t},\n// \t})\n//\n// \tif(isLoggedIn) {\n// \t\treturn <Redirect to={'/profile'}/>\n// \t}\n//\n// \treturn <Grid container justify=\"center\">\n// \t\t<Grid item xs={4}>\n// \t\t\t<form onSubmit={formik.handleSubmit}>\n// \t\t\t\t<FormControl>\n// \t\t\t\t\t<FormGroup>\n// \t\t\t\t\t\t<p>To log in use common test account credentials:</p>\n// \t\t\t\t\t\t<p><span>Email: </span> nya-admin@nya.nya</p>\n// \t\t\t\t\t\t<p><span>Password: </span> 1qazxcvBG</p>\n//\n// \t\t\t\t\t\t<TextField\n// \t\t\t\t\t\t\tlabel=\"Email\"\n// \t\t\t\t\t\t\tmargin=\"normal\"\n// \t\t\t\t\t\t\t{...formik.getFieldProps('email')}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t{formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n// \t\t\t\t\t\t<TextField\n// \t\t\t\t\t\t\ttype=\"password\"\n// \t\t\t\t\t\t\tlabel=\"Password\"\n// \t\t\t\t\t\t\tmargin=\"normal\"\n// \t\t\t\t\t\t\t{...formik.getFieldProps('password')}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t{formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n// \t\t\t\t\t\t<FormControlLabel\n// \t\t\t\t\t\t\tlabel={'Remember me'}\n// \t\t\t\t\t\t\tcontrol={<Checkbox\n// \t\t\t\t\t\t\t\tchecked={formik.values.rememberMe}\n// \t\t\t\t\t\t\t\t{...formik.getFieldProps('rememberMe')}\n// \t\t\t\t\t\t\t/>}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t{formik.touched.rememberMe && formik.errors.rememberMe ? <div style={{color: \"red\"}}>{formik.errors.rememberMe}</div> : null}\n// \t\t\t\t\t\t<Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n// \t\t\t\t\t</FormGroup>\n// \t\t\t\t</FormControl>\n// \t\t\t</form>\n//\n// \t\t</Grid>\n// \t</Grid>\n// }\n\n\n\n\nexport const Login = () => {\n\tconst dispatch = useDispatch()\n\n\n\tconst isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\t\tif(isLoggedIn) {\n\t\treturn <Redirect to={'/profile'}/>\n\t}\n\tconst onFinish = (values: any) => {\n\t\tdispatch(loginTC({email:values.email, password:values.password, rememberMe: values.rememberMe}))\n\t};\n\n\n\treturn (\n\t\t<Form\n\t\t\tname=\"normal_login\"\n\t\t\tclassName=\"login-form\"\n\t\t\tinitialValues={{ remember: true }}\n\t\t\tonFinish={onFinish}\n\t\t>\n\t\t\t<Form.Item\n\t\t\t\tname=\"email\"\n\t\t\t\tinitialValue={'nya-admin@nya.nya'}\n\t\t\t\trules={[{ required: true, message: 'Please input your Username!' }]}\n\t\t\t>\n\t\t\t\t<Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n\t\t\t</Form.Item>\n\t\t\t<Form.Item\n\t\t\t\tname=\"password\"\n\t\t\t\tinitialValue={'1qazxcvBG'}\n\t\t\t\trules={[{ required: true, message: 'Please input your Password!' }]}\n\t\t\t>\n\t\t\t\t<Input\n\t\t\t\t\tprefix={<LockOutlined className=\"site-form-item-icon\" />}\n\t\t\t\t\ttype=\"password\"\n\t\t\t\t\tplaceholder=\"Password\"\n\t\t\t\t/>\n\t\t\t</Form.Item>\n\t\t\t<Form.Item>\n\t\t\t\t<Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\n\t\t\t\t\t<Checkbox>Remember me</Checkbox>\n\t\t\t\t</Form.Item>\n\n\t\t\t\t<a className=\"login-form-forgot\" href=\"\">\n\t\t\t\t\tForgot password\n\t\t\t\t</a>\n\t\t\t</Form.Item>\n\n\t\t\t<Form.Item>\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n\t\t\t\t\tLog in\n\t\t\t\t</Button>\n\t\t\t\tOr <NavLink to={'/registration'}>register now!</NavLink>\n\t\t\t</Form.Item>\n\t\t</Form>\n\t);\n};","import {Dispatch} from \"redux\";\nimport {APIpack} from \"../api/api\";\nimport {change_statusAC} from './appReducer'\n\n\nexport enum ACTIONS_TYPE {\n    SET_CARD_PACKS = 'packsReducer/SET_CARD_PACKS',\n    SET_PAGE_COUNT = 'packsReducer/SET_PAGE_COUNT',\n    SET_PACKS_TOTAL_COUNT = 'packsReducer/SET_PACKS_TOTAL_COUNT',\n    SET_CURRENT_PAGE = 'packsReducer/SET_CURRENT_PAGE',\n    ADD_NEW_PACKS_CARD = 'packReducer/ADD_NEW_PACKS_CARD',\n    DELETE_PACK_CARD = 'packReducer/DELETE_PACK_CARD',\n    UPDATE_PACK_CARD = 'packReducer/UPDATE_PACK_CARD',\n    MY_PACKS = 'packReducer/MY_PACKS',\n}\n\nconst initialState = {\n    cardPacks: [] as Array<CardPackType>,\n    cardPacksTotalCount: 0,\n    maxCardsCount: 1000,\n    minCardsCount: 0,\n    page: 1,\n    pageCount: 10,\n}\ntype InitialStateType = typeof initialState\n\n\nexport const packsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_CARD_PACKS:\n            return {\n                ...state,\n                cardPacks: action.packs.map(pack => ({...pack}))\n            }\n        case ACTIONS_TYPE.SET_PAGE_COUNT:\n            return {\n                ...state,\n                pageCount: action.value\n            }\n        case ACTIONS_TYPE.SET_PACKS_TOTAL_COUNT:\n            return {\n                ...state,\n                cardPacksTotalCount: action.value\n            }\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\n                return {...state, page: action.value}\n        case ACTIONS_TYPE.ADD_NEW_PACKS_CARD:\n            return {...state,\n                cardPacks: [ action.card, ...state.cardPacks]}\n        case ACTIONS_TYPE.DELETE_PACK_CARD:\n            return {...state,\n                cardPacks: [...state.cardPacks.filter(pack => pack._id !== action.idCard)]}\n        case ACTIONS_TYPE.UPDATE_PACK_CARD:\n            return {...state}\n        // case ACTIONS_TYPE.MY_PACKS:\n        //     return {\n        //         ...state,\n        //         cardPacks: [...state.cardPacks.filter(c => c.user_id === action.id)]\n        //     }\n        default:\n            return state\n    }\n}\n\n// actions\nexport const setCardPacksAC = (packs: Array<CardPackType>) => ({\n    type: ACTIONS_TYPE.SET_CARD_PACKS, packs } as const)\n\nexport const setCardPacksPageCountAC = (value: number) => ({type: ACTIONS_TYPE.SET_PAGE_COUNT, value} as const)\n\nexport const setCardPacksTotalCountAC = (value: number) => ({type: ACTIONS_TYPE.SET_PACKS_TOTAL_COUNT, value} as const)\nexport const setCurrentPage = (value: number) => ({type: ACTIONS_TYPE.SET_CURRENT_PAGE, value} as const)\n//add packs\nexport const addNewCardsPackAC = (card: CardPackType) => ({ type: ACTIONS_TYPE.ADD_NEW_PACKS_CARD, card} as  const)\n//delete pack\nexport const deleteCardPackAC = (idCard: string) => ({type: ACTIONS_TYPE.DELETE_PACK_CARD, idCard} as const)\n//update pack\nexport const updateCardPackAC = (idCard: string, newName: string) => ({type: ACTIONS_TYPE.UPDATE_PACK_CARD,\n    idCard, newName} as const)\nexport const sortedMyPacks = (id: string) => ({type: ACTIONS_TYPE.MY_PACKS, id} as const)\n\n//thunks get all cards\nexport const getCardPacksTC = (pageNumber?: number, pageCount?: number, userID?: string) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    APIpack.getCardPacks(pageNumber, userID ).then(res => {\n        dispatch(setCardPacksAC(res.cardPacks))\n        dispatch(setCardPacksPageCountAC(res.pageCount))\n        dispatch(setCardPacksTotalCountAC(res.cardPacksTotalCount))\n        pageNumber &&  dispatch(setCurrentPage(pageNumber))\n        dispatch(change_statusAC('success'))\n    })\n}\n//thunk add new PacksCards\nexport const addNewCardPackTC = () => (dispatch: Dispatch) => {\n    APIpack.addPack()\n      .then(res => {\n          dispatch(change_statusAC('loading'))\n          dispatch(addNewCardsPackAC(res.newCardsPack))\n          APIpack.getCardPacks()\n              .then(res => {\n                  dispatch(setCardPacksAC(res.cardPacks))\n                  dispatch(change_statusAC('success'))\n              })\n\n      })\n}\n//thunk for delete Pack\nexport const deleteCardPackTC = (idPack: string) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    APIpack.deletePack(idPack)\n      .then(res => {\n          dispatch( deleteCardPackAC(idPack))\n          dispatch(change_statusAC('success'))\n      })\n}\n//thunk for update Pack\nexport const updateCardPackTC = (idPack: string, newName: string) => (dispatch: Dispatch) => {\n    APIpack.updatePack(idPack)\n      .then(res => {\n          dispatch(change_statusAC('loading'))\n          dispatch(updateCardPackAC( idPack, newName))\n          dispatch(change_statusAC('success'))\n      })\n}\n\n\n//types\nexport type ActionsType =\n    | ReturnType<typeof setCardPacksAC>\n    | ReturnType<typeof setCardPacksPageCountAC>\n    | ReturnType<typeof setCardPacksTotalCountAC>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof addNewCardsPackAC>\n    | ReturnType<typeof deleteCardPackAC>\n    | ReturnType<typeof updateCardPackAC>\n    | ReturnType<typeof sortedMyPacks>\n\nexport type CardPackType = {\n    _id: string\n    user_id: string\n    user_name: string\n    private: boolean\n    name: string\n    path: string\n    grade: number\n    shots: number\n    cardsCount: number\n    type: string\n    rating: number\n    created: string\n    updated: string\n    more_id: string\n    __v: number\n    deckCover: null | any\n}\n","import React from 'react'\nimport s from './NewPassword.module.css'\nimport {Button, Form, Input} from \"antd\"\nimport {newPassTC, setErrorNewPass} from '../../../redux/forgotReducer'\nimport {useDispatch, useSelector} from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport {AppRootStateType} from \"../../../redux/store\";\n\nexport const NewPassword = () => {\n\n\tconst dispatch = useDispatch()\n\tconst error = useSelector<AppRootStateType, string>(state => state.passRec.errorNewPass)\n\tconst infoNewPass = useSelector<AppRootStateType, string>(state => state.passRec.infoNewPass)\n\n\tconst history = useHistory()\n\n\tconst resetPasswordToken = history.location.pathname.slice(10, history.location.pathname.length)\n\t// alert (resetPasswordToken)\n\n\tconst layout = {\n\t\tlabelCol: {span: 8},\n\t\twrapperCol: {span: 16},\n\t}\n\n\tconst onFinish = (values: any) => {\n\t\tdispatch( newPassTC(values.newPassword1, resetPasswordToken) )\n\t\tsetTimeout(() => {\n\t\t\tdispatch(setErrorNewPass(''))\n\t\t}, 5000)\n\t}\n\n\tconst onFinishFailed = (errorInfo: any) => {\n\t\tconsole.log('Failed:', errorInfo)\n\t}\n\n\treturn (\n\t\t<div className={s.newPassOverlay}>\n\t\t\t<span className={s.spanText}>{infoNewPass}</span>\n\t\t\t<Form  {...layout} name=\"basic\"\n\t\t\t       initialValues={{remember: true}}\n\t\t\t       onFinish={onFinish}\n\t\t\t       onFinishFailed={onFinishFailed}>\n\n\t\t\t\t<Form.Item label=\"new password: \" name=\"newPassword1\" hasFeedback\n\t\t\t\t           rules={[\n\t\t\t\t\t           {required: true, message: 'Please input your password!'},\n\t\t\t\t\t           ({getFieldValue}) => ({\n\t\t\t\t\t\t           validator(_, value) {\n\t\t\t\t\t\t\t           if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n\t\t\t\t\t\t\t           if (value.length > 8 || !value || getFieldValue('password1') === value) {\n\t\t\t\t\t\t\t\t           return Promise.resolve()\n\t\t\t\t\t\t\t           }\n\t\t\t\t\t\t\t           return Promise.reject(new Error('Two passwords do not match!'))\n\t\t\t\t\t\t           },\n\t\t\t\t\t           }),]}>\n\t\t\t\t\t<Input.Password/>\n\t\t\t\t</Form.Item>\n\n\t\t\t\t<Form.Item label=\"repeat password: \" name=\"newPassword2\"  hasFeedback\n\t\t\t\t           rules={[\n\t\t\t\t\t           {\n\t\t\t\t\t\t           required: true,\n\t\t\t\t\t\t           message: 'Please confirm your password!',\n\t\t\t\t\t           },\n\t\t\t\t\t           ({getFieldValue}) => ({\n\t\t\t\t\t\t           validator(_, value) {\n\t\t\t\t\t\t\t           if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n\t\t\t\t\t\t\t           if (value.length > 8 || !value || getFieldValue('password1') === value) {\n\t\t\t\t\t\t\t\t           return Promise.resolve()\n\t\t\t\t\t\t\t           }\n\t\t\t\t\t\t\t           return Promise.reject(new Error('Two passwords do not match!'))\n\t\t\t\t\t\t           },\n\t\t\t\t\t           }),\n\t\t\t\t           ]}>\n\t\t\t\t\t<Input.Password/>\n\t\t\t\t</Form.Item>\n\n\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">change password</Button>\n\n\t\t\t</Form>\n\t\t\t<div>{error}</div>\n\t\t</div>\n\t)\n}","import React from 'react'\nimport {Form, Input, Button } from 'antd'\nimport s from './PasswordRecovery.module.css'\nimport {sendEmailPassRecTC, setErrorPassRec} from \"../../../redux/forgotReducer\"\nimport {useDispatch, useSelector} from \"react-redux\"\nimport {AppRootStateType} from \"../../../redux/store\"\n\nexport const PasswordRecovery = () => {\n\n\tconst dispatch = useDispatch()\n\n\tconst errorPassRec = useSelector<AppRootStateType, string>(state => state.passRec.error)\n\tconst infoPassRec = useSelector<AppRootStateType, string>(state => state.passRec.info)\n\n\tconst from = \"THE BEST MY TEAM baranov.sys@gmail.com\"\n\tconst message = `<div>\n\t\t\t\t\t\t\t\t\t\t\tвы отправили запрос на восстановления пароля, для продожения перейдите по ссылке:\n\t\t\t\t\t\t\t\t\t\t\t<a href='http://baranovaleksei.github.io/teamProject/#/new-pass/$token$'>link</a>\n\t\t\t\t\t\t\t\t\t\t\tесли это были на Вы - то ничего не делайте\n\t\t\t\t\t\t\t\t\t</div>`\n\n\n\tconst onFinish = (values: any) => {\n\t\tdispatch(sendEmailPassRecTC({email: values.emailRecPass, message: message, from: from}))\n\t\tsetTimeout(() => {\n\t\t\tdispatch(setErrorPassRec(''))\n\t\t}, 5000)\n\t}\n\tconst onFinishFailed = (errorInfo: any) => {\n\t\tconsole.log('Failed:', errorInfo)\n\t}\n\treturn (\n\t\t<div className={s.passRecOverlay}>\n\n\t\t\t<span className={s.nameRecPass}>{infoPassRec}</span>\n\t\t\t<Form className={s.formRecPass}\n\t\t\t\t  name=\"recoveryPass\"\n\t\t\t\t  initialValues={{remember: true}}\n\t\t\t\t  onFinish={onFinish}\n\t\t\t\t  onFinishFailed={onFinishFailed}>\n\n\t\t\t\t<Form.Item\n\t\t\t\t\tlabel=\"Email\"\n\t\t\t\t\tname=\"emailRecPass\"\n\t\t\t\t\trules={[{type: 'email', required: true, message: 'Please input your email'}]}\n\t\t\t\t>\n\t\t\t\t\t<Input/>\n\n\t\t\t\t</Form.Item>\n\n\n\n\t\t\t\t<span className={s.nameRecPass}> {errorPassRec} </span>\n\t\t\t\t<Form.Item>\n\t\t\t\t\t<Button type=\"primary\" htmlType=\"submit\">\n\t\t\t\t\t\tsend message\n\t\t\t\t\t</Button>\n\t\t\t\t</Form.Item>\n\n\t\t\t</Form>\n\t\t</div>\n\t)\n}","import React from 'react'\nimport s from './Registration.module.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../../redux/store'\nimport {setError, setRegistration} from '../../../redux/authReducer'\nimport {Redirect} from 'react-router-dom'\nimport {Form, Input, Button} from 'antd'\n\n\nexport const Registration = () => {\n    const dispatch = useDispatch()\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.auth.isRegistered)\n    const error = useSelector<AppRootStateType, string>(state => state.auth.error)\n    const layout = {\n        labelCol: {span: 8},\n        wrapperCol: {span: 16},\n    }\n    const onFinish = (values: any) => {\n        dispatch(setRegistration({email: values.email, password: values.password1}))\n        setTimeout(() => {\n            dispatch(setError(''))\n        }, 10000)\n    }\n\n    const onFinishFailed = (errorInfo: any) => {\n        console.log('Failed:', errorInfo)\n    }\n\n\n    if (isRegistered) {\n        return <Redirect to={'/login'}/>\n    }\n\n    return (\n        <div className={s.registrationOverlay}>\n\n\n            <Form  {...layout} name=\"basic\"  initialValues={{remember: true}} onFinish={onFinish}\n                   onFinishFailed={onFinishFailed}>\n                <Form.Item label=\"email\" name=\"email\"\n                    rules={[\n                        {required: true, message: 'Please input your email!'},\n                        {type: 'email', message: 'The input is not valid E-mail!',}\n                    ]}>\n                    <Input style={{width: '100%'}} />\n                </Form.Item>\n\n                <Form.Item label=\"Password1\" name=\"password1\" hasFeedback\n                           rules={[\n                               {required: true, message: 'Please input your password!'},\n                               ({getFieldValue}) => ({\n                                   validator(_, value) {\n                                       if (value.length < 8){return Promise.reject(new Error('8 and more' +\n                                           ' symbols...'))} else\n                                       if (value.length >= 8 || !value || getFieldValue('password1') === value) {\n                                           return Promise.resolve()\n                                       }\n                                       return Promise.reject(new Error('Two passwords do not match!'))\n                                   },\n                               }),]}>\n                    <Input.Password/>\n                </Form.Item>\n\n                <Form.Item label=\"Password2\" name=\"password2\"  hasFeedback\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please confirm your password!',\n                        },\n                        ({getFieldValue}) => ({\n                            validator(_, value) {\n                                if (value.length < 8){return Promise.reject(new Error('8 and more symbols...'))} else\n                                if (value.length >= 8 || !value || getFieldValue('password1') === value) {\n                                    return Promise.resolve()\n                                }\n                                return Promise.reject(new Error('Two passwords do not match!'))\n                            },\n                        }),\n                    ]}>\n                    <Input.Password/>\n                </Form.Item>\n\n                <Button type=\"primary\" htmlType=\"submit\">Button</Button>\n                <div className={s.serverError}>{error}</div>\n            </Form>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/Pulse.0d6890d8.svg\";","import img from '../../assets/img/Pulse.svg'\nimport s from './Loading.module.css'\n\n\nexport const Loading = () => {\n    return <div className={s.loading}>\n        <img src={img} alt=\"\"/>\n    </div>\n}","import React from 'react'\nimport s from './Profile.module.css'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../../redux/store'\nimport {NavLink, Redirect} from 'react-router-dom'\nimport {ProfileType} from '../../../redux/profileReducer'\nimport {logOutTC} from '../../../redux/loginReducer'\nimport {Loading} from '../../Loading/loading'\n\nexport const Profile = () => {\n    const dispatch = useDispatch()\n    const profile = useSelector<AppRootStateType, ProfileType | null>(state => state.profile.profile)\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'}/>\n    }\n    const logout = () => {\n    \tdispatch(logOutTC())\n\t}\n\n    if (status==='loading'){\n        return <Loading/>\n    }\n     return (\n        <div className={s.profileOverlay}>\n            {profile &&\n\t\t\t\t<div className={s.profile}>\n\t\t\t\t\t<img src={profile.avatar} alt=\"\"/>\n\t\t\t\t\t<div>\n\t\t\t\t\t\tname: {profile.name} <br/>\n\t\t\t\t\t\ttoken: {profile.token} <br/>\n\t\t\t\t\t\t_id: {profile._id}<br/>\n\t\t\t\t\t\temail: {profile.email}<br/>\n\t\t\t\t\t\tcreated: {profile.created}<br/>\n\t\t\t\t\t\tadmin: {profile.isAdmin ? 'yes' : 'no'}<br/>\n\n                        <NavLink to=\"/packs\"> Packs</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div><button onClick={logout}>Log out</button></div>\n\n\t\t\t\t</div>\n\n            }\n        </div>\n    )\n}\n","import {Dispatch} from 'redux'\nimport {API, APIpack} from '../api/api'\nimport {log} from 'util'\nimport {change_statusAC} from './appReducer'\n\nexport enum ACTIONS_TYPE {\n    SET_CARDS = 'cardsReducer/SET_CARDS',\n    SET_PACK_ID = 'cardsReducer/SET_PACK_ID',\n    SET_PACK_USER_ID = 'cardsReducer/SET_PACK_USER_ID',\n    SET_CURRENT_PAGE = 'cardsReducer/SET_CURRENT_PAGE',\n    ADD_CARD = 'cardsReducer/ADD_CARD',\n    UPDATE_CARD = 'cardsReducer/UPDATE_CARD',\n}\n\nconst initialState = {\n    cards: [] as Array<CardType | null>,\n    packId: '',\n    packUserId: '',\n    cardsTotalCount: 0,\n    currentPage: 1,\n}\ntype InitialStateType = typeof initialState\n\nexport const cardsReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_CARDS:\n            return {...state, cards: action.cards}\n        case ACTIONS_TYPE.SET_PACK_ID:\n            return {...state, packId: action.id}\n        case ACTIONS_TYPE.SET_PACK_USER_ID:\n            return {...state, packUserId: action.id}\n        case ACTIONS_TYPE.SET_CURRENT_PAGE:\n            return {...state, currentPage: action.page}\n        case ACTIONS_TYPE.ADD_CARD:\n            return {...state, cards: [action.card, ...state.cards]}\n        case ACTIONS_TYPE.UPDATE_CARD:\n            return {...state, cards: [action.card, ...state.cards]}\n        default:\n            return state\n    }\n}\nexport const setCards = (cards: Array<CardType>) => ({type: ACTIONS_TYPE.SET_CARDS, cards} as const)\nexport const setPackId = (id: string) => ({type: ACTIONS_TYPE.SET_PACK_ID, id} as const)\nexport const setPackUserId = (id: string) => ({type: ACTIONS_TYPE.SET_PACK_USER_ID, id} as const)\nexport const setCurrentPage = (page: number) => ({type: ACTIONS_TYPE.SET_CURRENT_PAGE, page} as const)\nexport const addCard = (card: CardType) => ({type: ACTIONS_TYPE.ADD_CARD, card} as const)\nexport const updateCard = (card: CardType) => ({type: ACTIONS_TYPE.UPDATE_CARD, card} as const)\n// thunks\n\nexport const getCardsTC = (packId: string, page?: number) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    APIpack.getCards(packId, page)\n        .then(res => {\n            dispatch(setCards(res.data.cards))\n            dispatch(setPackUserId(res.data.packUserId))\n            page && dispatch(setCurrentPage(page))\n            dispatch(change_statusAC('success'))\n        })\n        .catch(err => {\n            console.log(JSON.stringify(err))\n            dispatch(change_statusAC('failed'))\n        })\n}\n\nexport const addCardTC = (packId: string, question: string, answer: string) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    APIpack.addCard(packId, question, answer).then(res => {\n        dispatch(addCard(res.data))\n        APIpack.getCards(packId).then(res=> {\n            dispatch(setCards(res.data.cards))\n            dispatch(change_statusAC('success'))\n        })\n\n    })\n}\n\nexport const updateCardTC = (cardId: string, question: string, answer: string, packId: string) => (dispatch: Dispatch) => {\n    dispatch(change_statusAC('loading'))\n    APIpack.updateCard(cardId, question, answer).then(res => {\n        dispatch(updateCard(res.data))\n        APIpack.getCards(packId).then(res=> {\n            dispatch(setCards(res.data.cards))\n            dispatch(change_statusAC('success'))\n        })\n    })\n}\n\n\n// types\ntype ActionsType =\n    | ReturnType<typeof setCards>\n    | ReturnType<typeof setPackId>\n    | ReturnType<typeof setPackUserId>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof addCard>\n    | ReturnType<typeof updateCard>\n\n\nexport type CardType = {\n    answer: string\n    question: string\n    cardsPack_id: string\n    grade: number\n    rating: number\n    shots: number\n    type: string\n    user_id: string\n    created: string\n    updated: string\n    __v: number\n    _id: string\n}","import React, {FC} from 'react'\nimport s from './Pagination.module.css'\nimport {Pagination} from 'antd'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {setCurrentPage} from '../../redux/packReducer'\n\n\ntype PropsType = {\n    totalItemCount: number\n    onChangePage: (pageNumber: number) => void\n    currentPage: number\n}\nexport const PaginationComp: FC<PropsType> = (props) => {\n\n    const dispatch = useDispatch()\n    const onChange = (pageNumber: number) => {\n        props.onChangePage(pageNumber)\n        dispatch(setCurrentPage(pageNumber))\n    }\n    return (\n        <div className={s.pagination}>\n            <Pagination showQuickJumper current={props.currentPage} total={props.totalItemCount} onChange={onChange}/>\n        </div>\n    )\n}","import React, {useEffect, useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport s from './Packs.module.css'\nimport {\n    addNewCardPackTC,\n    CardPackType,\n    deleteCardPackTC,\n    getCardPacksTC,\n    sortedMyPacks,\n    updateCardPackTC\n} from '../../redux/packReducer'\nimport {Button} from 'antd'\nimport {PaginationComp} from '../Pagination/Pagination'\nimport {Redirect} from 'react-router-dom'\nimport {DeleteTwoTone, EditTwoTone, FolderAddOutlined} from '@ant-design/icons'\nimport {getCardsTC, setPackId} from '../../redux/cardsReducer'\nimport {Loading} from '../Loading/loading'\n\n\nexport const Packs = () => {\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\n    const dispatch = useDispatch()\n    const [cards, setCards] = useState(false)\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.pack.cardPacksTotalCount)\n    const cardPacks = useSelector<AppRootStateType, Array<CardPackType>>(state => state.pack.cardPacks)\n    const userID = useSelector<AppRootStateType, string>(state => state.profile.profile ? state.profile.profile?._id : '')\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n    const currentPage = useSelector<AppRootStateType, number>(state => state.pack.page)\n\n    const onChangePage = (pageNumber: number) => {\n        dispatch(getCardPacksTC(pageNumber))\n    }\n\n    useEffect(() => {\n        dispatch(getCardPacksTC())\n    }, [])\n\n    const addNewPacks = () => {\n        dispatch(addNewCardPackTC())\n    }\n    const deleteOfPack = (idPack: string) => {\n        dispatch(deleteCardPackTC(idPack))\n    }\n    const updateOfPack = (idPack: string, newName: string = 'best of the best') => {\n        setCards(false)\n        dispatch(updateCardPackTC(idPack, newName))\n    }\n    const sortPacks = (userID: any) => {\n        dispatch(getCardPacksTC( userID ))\n    }\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'}/>\n    }\n    if (cards) {\n        return <Redirect\n            to={{\n                pathname: '/cards',\n                // state: { setCards: setCards, cards: cards }\n            }}\n        />\n    }\n\n\n    return (\n        <div className={s.container}>\n            {status === 'loading' && <Loading/>}\n            <div className={s.header}>\n                <div className={s.mainHeaderInfo}>\n                    <p>Name</p>\n                    <p>cardsCount</p>\n                </div>\n                <div className={s.descr}>\n                    <p>updated</p>\n                    <p>userId</p>\n                    <p>packId</p>\n                </div>\n\n                <div className={s.buttons}>\n                    <Button type='default'\n                            shape={'circle'}\n                            style={{marginRight: '5px'}}\n                            onClick={() => sortPacks(userID)}>my</Button>\n                    <Button type='default'\n                            style={{marginRight: '5px'}}\n                            shape={'circle'}\n                            icon={<FolderAddOutlined/>}\n                            onClick={addNewPacks}/>\n                </div>\n\n            </div>\n\n            {cardPacks.map((k, i) => <div key={i} className={s.wrapper}>\n                <div onClick={() => {\n                    dispatch(setPackId(k._id))\n                    dispatch(getCardsTC(k._id))\n                    setCards(!cards)\n                }} className={s.cardPacksWrapper}>\n                    <div className={s.mainInfo}>\n                        <span>{k.name}</span>\n                        <span>{k.cardsCount}</span>\n                    </div>\n\n                    <span className={s.card}>{k.updated}</span>\n                    <span className={s.card}>UserId: {k.user_id}</span>\n                    <span className={s.card}>PackId: {k._id}</span>\n                </div>\n\n                <div className={s.buttons}>\n                    {userID === k.user_id && <Button type='default'\n                                                     style={{marginRight: '5px'}}\n                                                     shape={'circle'}\n                                                     onClick={() => updateOfPack(k._id)}\n                                                     icon={<EditTwoTone/>}/>}\n                    {userID === k.user_id && <Button type=\"default\"\n                                                     onClick={() => deleteOfPack(k._id)}\n                                                     style={{marginRight: '5px'}}\n                                                     shape={'circle'}\n                                                     icon={<DeleteTwoTone/>}/>}\n                </div>\n\n            </div>)}\n            <PaginationComp totalItemCount={cardPacksTotalCount} onChangePage={onChangePage} currentPage={currentPage}/>\n\n        </div>\n    )\n}\n","import React, {FC, useState} from 'react'\nimport {addCardTC, CardType, updateCardTC} from '../../redux/cardsReducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport s from './Cards.module.css'\nimport {Redirect} from 'react-router-dom'\nimport {RollbackOutlined, DeleteTwoTone, EditTwoTone, FolderAddOutlined} from '@ant-design/icons'\nimport {Loading} from '../Loading/loading'\nimport { Form, Input, InputNumber, Button } from 'antd';\n\ntype PropsType = {\n    // userId: string\n    // packId: string\n    // setCards: (value: boolean)=> void\n}\n\nexport const Cards: FC<PropsType> = (props) => {\n    const dispatch = useDispatch()\n    const [packs, setPacks] = useState(false)\n    const [addCard, setAddCard] = useState(false)\n    const [updateCard, setUpdateCard] = useState(false)\n    const cards = useSelector<AppRootStateType, Array<CardType | null>>(state => state.cards.cards)\n    const id = useSelector<AppRootStateType, string>(state => state.profile.profile ? state.profile.profile?._id : '')\n    const packUserId = useSelector<AppRootStateType, string>(state => state.cards.packUserId)\n    const packId = useSelector<AppRootStateType, string>(state => state.cards.packId)\n    const status = useSelector<AppRootStateType, string>(state => state.app.status)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.login.isLoggedIn)\n\n    const deleteOfCard = (id: string) => {\n\n    }\n    const updateOfCard = (id: string) => {\n        setUpdateCard(true)\n    }\n    const openPopup = () => {\n        setAddCard(true)\n    }\n\n\n    const validateMessages = {\n        required: '${label} is required!',\n    };\n\n    const onFinish1 = (values: any) => {\n        dispatch(addCardTC(packId, values.question, values.answer))\n        setAddCard(false)\n    };\n    const onFinish2 = (values: any) => {\n        dispatch(updateCardTC(values.cardId, values.question, values.answer, packId))\n        setUpdateCard(false)\n    };\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n    if (packs) {\n        return <Redirect to={'/packs'}/>\n    }\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'}/>\n    }\n    return (\n        <div className={s.cards}>\n            {status === 'loading' && <Loading/>}\n\n            {addCard && <div className={s.popup}>\n                <div className={s.addCard}>\n                    <Form {...layout} name=\"nest-messages\" onFinish={onFinish1} validateMessages={validateMessages}>\n\n                        <Form.Item name={'question'} label=\"Question\" rules={[{ required: true }]}>\n                            <Input />\n                        </Form.Item>\n                        <Form.Item name={'answer'} label=\"Answer\" rules={[{ required: true }]}>\n                            <Input />\n                        </Form.Item>\n\n                        <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                            <Button type=\"primary\" htmlType=\"submit\">\n                                Add\n                            </Button>\n                        </Form.Item>\n                    </Form>\n                </div>\n            </div>}\n\n\n            <div className={s.header}>\n                <div className={s.mainInfo}>\n                    <p>question</p>\n                    <p className={s.answer}>answer {id !== packUserId && <span>not your</span>}</p>\n                </div>\n                <Button type='default' style={{marginRight: '5px'}} onClick={() => setPacks(true)}\n                        icon={<RollbackOutlined/>}\n                        shape={'circle'}/>\n                <Button type='default'\n                        style={{marginRight: '5px'}}\n                        shape={'circle'}\n                        icon={<FolderAddOutlined/>}\n                        onClick={openPopup}\n                        disabled={id !== packUserId}/>\n\n            </div>\n            {cards.length ? cards.map((c, i) => c && <div key={i} className={s.packCards}>\n                <div className={s.mainInfo}>\n                    <p>{c.question}</p>\n                    <p>{c.answer}</p>\n                </div>\n                <div>\n                    {id === c.user_id && <Button type='default'\n                                                 style={{marginRight: '5px'}}\n                                                 shape={'circle'}\n                                                 onClick={() => updateOfCard(c._id)}\n                                                 icon={<EditTwoTone/>} disabled={id !== c.user_id}/>}\n                    {id === c.user_id && <Button type=\"default\"\n                                                 onClick={() => deleteOfCard(c._id)}\n                                                 style={{marginRight: '5px'}}\n                                                 shape={'circle'}\n                                                 icon={<DeleteTwoTone/>}\n                                                 disabled={id !== c.user_id}/>}\n                </div>\n                    {updateCard && <div className={s.popup}>\n                        <div className={s.addCard}>\n                            <Form {...layout} name=\"nest-messages\" onFinish={onFinish2} validateMessages={validateMessages}>\n                                <Form.Item name={'cardId'} initialValue={c._id} >\n                                    <Input disabled={true} style={{width: '400px', textAlign: 'center'}}/>\n                                </Form.Item>\n                                <Form.Item name={'question'} label=\"Question\" rules={[{ required: true }]} initialValue={c.question}>\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item name={'answer'} label=\"Answer\" rules={[{ required: true }]} initialValue={c.answer}>\n                                    <Input />\n                                </Form.Item>\n                                <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\n                                    <Button type=\"primary\" htmlType=\"submit\" >\n                                        Update\n                                    </Button>\n                                </Form.Item>\n                            </Form>\n                        </div>\n                    </div>}\n\n            </div>)\n            : <div className={s.noCards}>no cards</div>}\n        </div>\n    )\n}","import React from 'react'\nimport {Redirect, Route, Switch} from 'react-router-dom'\nimport {Error404} from '../Pages/Error404/Error404'\nimport {Login} from '../Pages/Login/Login'\nimport {NewPassword} from '../Pages/NewPassword/NewPassword'\nimport {PasswordRecovery} from '../Pages/PasswordRecovery/PasswordRecovery'\nimport {Registration} from '../Pages/Registration/Registration'\nimport {Profile} from '../Pages/Profile/Profile'\nimport {Packs} from '../Packs/Packs'\nimport { Cards } from '../Cards/Cards'\n\nexport const PATH = {\n\tLOGIN: '/login',\n\tREGISTRATION: '/registration',\n\tPASSWORD_RECOVERY: '/pass-recovery',\n\tNEW_PASSWORD: '/new-pass',\n\tPROFILE: '/profile',\n\tPACKS: '/packs',\n\tCARDS: '/cards',\n}\n\nfunction Routes() {\n\treturn (\n\t\t<div>\n\t\t\t<Switch>\n\t\t\t\t{/*в начале мы попадаем на страницу \"/\" и переходим сразу на страницу Login*/}\n\t\t\t\t{/*exact нужен чтоб указать полное совподение (что после \"/\" ничего не будет)*/}\n\t\t\t\t<Route path={\"/\"} exact render={ () => <Redirect to={ PATH.LOGIN }/> }/>\n\t\t\t\t<Route path={\"/teamProject\"} exact render={ () => <Profile/> }/>\n\n\t\t\t\t<Route path={ PATH.LOGIN } render={ () => <Login/> } />\n\t\t\t\t<Route path={ PATH.REGISTRATION } render={ () => <Registration /> } />\n\t\t\t\t<Route path={ PATH.PASSWORD_RECOVERY } render={ ()=> <PasswordRecovery/> } />\n\t\t\t\t<Route path={ PATH.NEW_PASSWORD } render={ ()=> <NewPassword/> } />\n\t\t\t\t<Route path={ PATH.PROFILE } render={ ()=> <Profile/> } />\n\t\t\t\t<Route path={ PATH.PACKS } render={ ()=> <Packs/> } />\n\t\t\t\t<Route path={ PATH.CARDS } render={ ()=> <Cards/> } />\n\n\t\t\t\t<Route path={'/404'} render={() => <Error404/>}/>\n\t\t\t\t<Redirect from={'*'} to={'/404'}/>\n\n\t\t\t</Switch>\n\t\t</div>\n\t)\n}\n\nexport default Routes\n","import React from 'react'\nimport s from './Header.module.css'\nimport {PATH} from \"../Routes/Routes\"\nimport {NavLink, Redirect} from 'react-router-dom'\nimport {useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\n\nfunction Header() {\n\tconst isLogin = useSelector<AppRootStateType,  boolean>(state=> state.auth.isLogin)\n\n\treturn (\n\t\t<div className={s.nav}>\n\t\t\t<button className={ s.menuHover }> Меню </button>\n\t\t\t<div className={s.items}>\n\t\t\t\t{isLogin &&\n\n\t\t\t\t<div className={ s.item }>\n\t\t\t\t\t<NavLink to= { PATH.PROFILE } activeClassName = { s.activeLink }>Profile</NavLink>\n\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t\t{!isLogin && <div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.LOGIN } activeClassName = { s.activeLink }>Login</NavLink>\n\t\t\t\t</div>}\n\t\t\t\t{!isLogin &&<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.REGISTRATION } activeClassName = { s.activeLink }>Registration</NavLink>\n\t\t\t\t</div>}\n\t\t\t\t{!isLogin &&<div className={ s.item }>\n\t\t\t\t\t<NavLink to={ PATH.PASSWORD_RECOVERY } activeClassName = { s.activeLink }>Password recovery</NavLink>\n\t\t\t\t</div>}\n\t\t\t\t{/*<div className={ s.item }>*/}\n\t\t\t\t{/*\t<NavLink to={ PATH.NEW_PASSWORD } activeClassName = { s.activeLink }>New password</NavLink>*/}\n\t\t\t\t{/*</div>*/}\n\t\t\t\t{isLogin &&\n\t\t\t\t\t<div className={ s.item } >\n\t\t\t\t\t\t<NavLink to={ PATH.PACKS } activeClassName = { s.activeLink }>Packs</NavLink>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Header\n","import React from 'react'\nimport './App.css'\nimport {HashRouter, Redirect} from 'react-router-dom'\nimport Routes from './Component/Routes/Routes'\nimport Header from './Component/Header/Header'\nimport {useSelector} from 'react-redux'\nimport {AppRootStateType} from './redux/store'\n\n\nfunction App() {\n\n    return (\n        <div>\n            <Header/>\n            <Routes/>\n        </div>\n    )\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './appReducer'\nimport { authReducer } from './authReducer'\nimport {loginReducer} from \"./loginReducer\";\nimport {forgotReducer} from \"./forgotReducer\";\nimport { profileReducer } from './profileReducer';\nimport {packsReducer} from \"./packReducer\";\nimport {cardsReducer} from './cardsReducer'\n\n\nconst rootReducer = combineReducers({\n    auth: authReducer,\n    app: appReducer,\n    login: loginReducer,\n    profile: profileReducer,\n    passRec: forgotReducer,\n    pack: packsReducer,\n    cards: cardsReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport {Provider} from 'react-redux'\nimport {store} from './redux/store'\nimport {HashRouter} from 'react-router-dom'\nimport Routes from './Component/Routes/Routes'\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3rYIR\",\"menuHover\":\"Header_menuHover__2eDeL\",\"items\":\"Header_items__3t3lP\",\"item\":\"Header_item__11opL\",\"activeLink\":\"Header_activeLink__3WAn0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Packs_container__8PjF6\",\"header\":\"Packs_header__3nazv\",\"descr\":\"Packs_descr__1n58d\",\"mainHeaderInfo\":\"Packs_mainHeaderInfo__3mBp-\",\"wrapper\":\"Packs_wrapper__1BZZd\",\"cardPacksWrapper\":\"Packs_cardPacksWrapper__3wp-X\",\"mainInfo\":\"Packs_mainInfo__1MxMg\",\"card\":\"Packs_card__3YlLU\",\"buttons\":\"Packs_buttons__hKtsa\",\"buttonsWrapper\":\"Packs_buttonsWrapper__1BcVC\",\"packs\":\"Packs_packs__H4xo7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cards\":\"Cards_cards__37GtD\",\"header\":\"Cards_header__2wxTe\",\"mainInfo\":\"Cards_mainInfo__3B8M_\",\"answer\":\"Cards_answer__gG7Ta\",\"packCards\":\"Cards_packCards__wh6mK\",\"noCards\":\"Cards_noCards__1u_Wn\",\"popup\":\"Cards_popup__2ZJJm\",\"addCard\":\"Cards_addCard__139D2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"passRecOverlay\":\"PasswordRecovery_passRecOverlay__dDdKX\",\"nameRecPass\":\"PasswordRecovery_nameRecPass__2C3uT\",\"formRecPass\":\"PasswordRecovery_formRecPass__l0PYz\"};"],"sourceRoot":""}